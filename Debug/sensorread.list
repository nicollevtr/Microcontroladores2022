
sensorread.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000240c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002594  08002594  00012594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080025ac  080025ac  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080025ac  080025ac  000125ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080025b4  080025b4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080025b4  080025b4  000125b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080025b8  080025b8  000125b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080025bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000118  2000000c  080025c8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000124  080025c8  00020124  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dfe8  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bbe  00000000  00000000  0002e024  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c18  00000000  00000000  0002fbe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b80  00000000  00000000  00030800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001791  00000000  00000000  00031380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d5dc  00000000  00000000  00032b11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c9e9b  00000000  00000000  000400ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00109f88  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003310  00000000  00000000  00109fdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800257c 	.word	0x0800257c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	0800257c 	.word	0x0800257c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <store_char>:
  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
}

void store_char(unsigned char c, ring_buffer *buffer)
{
 80004c0:	b480      	push	{r7}
 80004c2:	b085      	sub	sp, #20
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	4603      	mov	r3, r0
 80004c8:	6039      	str	r1, [r7, #0]
 80004ca:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 80004cc:	683b      	ldr	r3, [r7, #0]
 80004ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80004d0:	3301      	adds	r3, #1
 80004d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80004d6:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 80004d8:	683b      	ldr	r3, [r7, #0]
 80004da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	429a      	cmp	r2, r3
 80004e0:	d007      	beq.n	80004f2 <store_char+0x32>
    buffer->buffer[buffer->head] = c;
 80004e2:	683b      	ldr	r3, [r7, #0]
 80004e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80004e6:	683a      	ldr	r2, [r7, #0]
 80004e8:	79f9      	ldrb	r1, [r7, #7]
 80004ea:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 80004ec:	68fa      	ldr	r2, [r7, #12]
 80004ee:	683b      	ldr	r3, [r7, #0]
 80004f0:	641a      	str	r2, [r3, #64]	; 0x40
  }
}
 80004f2:	bf00      	nop
 80004f4:	3714      	adds	r7, #20
 80004f6:	46bd      	mov	sp, r7
 80004f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fc:	4770      	bx	lr
	...

08000500 <Uart_isr>:




void Uart_isr (UART_HandleTypeDef *huart)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b086      	sub	sp, #24
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	68db      	ldr	r3, [r3, #12]
 8000516:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8000518:	697b      	ldr	r3, [r7, #20]
 800051a:	f003 0320 	and.w	r3, r3, #32
 800051e:	2b00      	cmp	r3, #0
 8000520:	d013      	beq.n	800054a <Uart_isr+0x4a>
 8000522:	693b      	ldr	r3, [r7, #16]
 8000524:	f003 0320 	and.w	r3, r3, #32
 8000528:	2b00      	cmp	r3, #0
 800052a:	d00e      	beq.n	800054a <Uart_isr+0x4a>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	685b      	ldr	r3, [r3, #4]
 8000538:	73fb      	strb	r3, [r7, #15]
        store_char (c, _rx_buffer);  // store data in buffer
 800053a:	4b1c      	ldr	r3, [pc, #112]	; (80005ac <Uart_isr+0xac>)
 800053c:	681a      	ldr	r2, [r3, #0]
 800053e:	7bfb      	ldrb	r3, [r7, #15]
 8000540:	4611      	mov	r1, r2
 8000542:	4618      	mov	r0, r3
 8000544:	f7ff ffbc 	bl	80004c0 <store_char>
        return;
 8000548:	e02c      	b.n	80005a4 <Uart_isr+0xa4>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800054a:	697b      	ldr	r3, [r7, #20]
 800054c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000550:	2b00      	cmp	r3, #0
 8000552:	d027      	beq.n	80005a4 <Uart_isr+0xa4>
 8000554:	693b      	ldr	r3, [r7, #16]
 8000556:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800055a:	2b00      	cmp	r3, #0
 800055c:	d022      	beq.n	80005a4 <Uart_isr+0xa4>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 800055e:	4b14      	ldr	r3, [pc, #80]	; (80005b0 <Uart_isr+0xb0>)
 8000560:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000562:	4b13      	ldr	r3, [pc, #76]	; (80005b0 <Uart_isr+0xb0>)
 8000564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000566:	429a      	cmp	r2, r3
 8000568:	d108      	bne.n	800057c <Uart_isr+0x7c>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	68da      	ldr	r2, [r3, #12]
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000578:	60da      	str	r2, [r3, #12]

    	      huart->Instance->SR;
    	      huart->Instance->DR = c;

    	    }
    	return;
 800057a:	e012      	b.n	80005a2 <Uart_isr+0xa2>
    	      unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 800057c:	4b0c      	ldr	r3, [pc, #48]	; (80005b0 <Uart_isr+0xb0>)
 800057e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000580:	4a0b      	ldr	r2, [pc, #44]	; (80005b0 <Uart_isr+0xb0>)
 8000582:	5cd3      	ldrb	r3, [r2, r3]
 8000584:	73bb      	strb	r3, [r7, #14]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 8000586:	4b0a      	ldr	r3, [pc, #40]	; (80005b0 <Uart_isr+0xb0>)
 8000588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800058a:	3301      	adds	r3, #1
 800058c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000590:	4a07      	ldr	r2, [pc, #28]	; (80005b0 <Uart_isr+0xb0>)
 8000592:	6453      	str	r3, [r2, #68]	; 0x44
    	      huart->Instance->SR;
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	7bba      	ldrb	r2, [r7, #14]
 80005a0:	605a      	str	r2, [r3, #4]
    	return;
 80005a2:	bf00      	nop
    }
}
 80005a4:	3718      	adds	r7, #24
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	20000080 	.word	0x20000080
 80005b0:	20000028 	.word	0x20000028

080005b4 <delay>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint16_t Value_Buf[2];

void delay (uint16_t time)
{
 80005b4:	b480      	push	{r7}
 80005b6:	b083      	sub	sp, #12
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	4603      	mov	r3, r0
 80005bc:	80fb      	strh	r3, [r7, #6]
	/* change your code here for the delay in microseconds */
	__HAL_TIM_SET_COUNTER(&htim6, 0);
 80005be:	4b09      	ldr	r3, [pc, #36]	; (80005e4 <delay+0x30>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	2200      	movs	r2, #0
 80005c4:	625a      	str	r2, [r3, #36]	; 0x24
	while ((__HAL_TIM_GET_COUNTER(&htim6))<time);
 80005c6:	bf00      	nop
 80005c8:	4b06      	ldr	r3, [pc, #24]	; (80005e4 <delay+0x30>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80005ce:	88fb      	ldrh	r3, [r7, #6]
 80005d0:	429a      	cmp	r2, r3
 80005d2:	d3f9      	bcc.n	80005c8 <delay+0x14>
}
 80005d4:	bf00      	nop
 80005d6:	bf00      	nop
 80005d8:	370c      	adds	r7, #12
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	200000d0 	.word	0x200000d0

080005e8 <Set_Pin_Output>:
float Temperature = 0;
float Humidity = 0;
uint8_t Presence = 0;

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b088      	sub	sp, #32
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
 80005f0:	460b      	mov	r3, r1
 80005f2:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f4:	f107 030c 	add.w	r3, r7, #12
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]
 8000602:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000604:	887b      	ldrh	r3, [r7, #2]
 8000606:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000608:	2301      	movs	r3, #1
 800060a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800060c:	2300      	movs	r3, #0
 800060e:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000610:	f107 030c 	add.w	r3, r7, #12
 8000614:	4619      	mov	r1, r3
 8000616:	6878      	ldr	r0, [r7, #4]
 8000618:	f000 fd3e 	bl	8001098 <HAL_GPIO_Init>
}
 800061c:	bf00      	nop
 800061e:	3720      	adds	r7, #32
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}

08000624 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b088      	sub	sp, #32
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
 800062c:	460b      	mov	r3, r1
 800062e:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000630:	f107 030c 	add.w	r3, r7, #12
 8000634:	2200      	movs	r2, #0
 8000636:	601a      	str	r2, [r3, #0]
 8000638:	605a      	str	r2, [r3, #4]
 800063a:	609a      	str	r2, [r3, #8]
 800063c:	60da      	str	r2, [r3, #12]
 800063e:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000640:	887b      	ldrh	r3, [r7, #2]
 8000642:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000644:	2300      	movs	r3, #0
 8000646:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000648:	2301      	movs	r3, #1
 800064a:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 800064c:	f107 030c 	add.w	r3, r7, #12
 8000650:	4619      	mov	r1, r3
 8000652:	6878      	ldr	r0, [r7, #4]
 8000654:	f000 fd20 	bl	8001098 <HAL_GPIO_Init>
}
 8000658:	bf00      	nop
 800065a:	3720      	adds	r7, #32
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}

08000660 <DHT11_Start>:

#define DHT11_PORT GPIOA
#define DHT11_PIN GPIO_PIN_1

void DHT11_Start (void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
	Set_Pin_Output (DHT11_PORT, DHT11_PIN);  // set the pin as output
 8000664:	2102      	movs	r1, #2
 8000666:	480d      	ldr	r0, [pc, #52]	; (800069c <DHT11_Start+0x3c>)
 8000668:	f7ff ffbe 	bl	80005e8 <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 0);   // pull the pin low
 800066c:	2200      	movs	r2, #0
 800066e:	2102      	movs	r1, #2
 8000670:	480a      	ldr	r0, [pc, #40]	; (800069c <DHT11_Start+0x3c>)
 8000672:	f000 fec5 	bl	8001400 <HAL_GPIO_WritePin>
	delay (18000);   // wait for 18ms
 8000676:	f244 6050 	movw	r0, #18000	; 0x4650
 800067a:	f7ff ff9b 	bl	80005b4 <delay>
    HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 800067e:	2201      	movs	r2, #1
 8000680:	2102      	movs	r1, #2
 8000682:	4806      	ldr	r0, [pc, #24]	; (800069c <DHT11_Start+0x3c>)
 8000684:	f000 febc 	bl	8001400 <HAL_GPIO_WritePin>
	delay (20);   // wait for 20us
 8000688:	2014      	movs	r0, #20
 800068a:	f7ff ff93 	bl	80005b4 <delay>
	Set_Pin_Input(DHT11_PORT, DHT11_PIN);    // set as input
 800068e:	2102      	movs	r1, #2
 8000690:	4802      	ldr	r0, [pc, #8]	; (800069c <DHT11_Start+0x3c>)
 8000692:	f7ff ffc7 	bl	8000624 <Set_Pin_Input>
}
 8000696:	bf00      	nop
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	40020000 	.word	0x40020000

080006a0 <DHT11_Check_Response>:

uint8_t DHT11_Check_Response (void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 80006a6:	2300      	movs	r3, #0
 80006a8:	71fb      	strb	r3, [r7, #7]
	delay (40);
 80006aa:	2028      	movs	r0, #40	; 0x28
 80006ac:	f7ff ff82 	bl	80005b4 <delay>
	if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))
 80006b0:	2102      	movs	r1, #2
 80006b2:	4811      	ldr	r0, [pc, #68]	; (80006f8 <DHT11_Check_Response+0x58>)
 80006b4:	f000 fe8c 	bl	80013d0 <HAL_GPIO_ReadPin>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d10e      	bne.n	80006dc <DHT11_Check_Response+0x3c>
	{
		delay (80);
 80006be:	2050      	movs	r0, #80	; 0x50
 80006c0:	f7ff ff78 	bl	80005b4 <delay>
		if ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN))) Response = 1;
 80006c4:	2102      	movs	r1, #2
 80006c6:	480c      	ldr	r0, [pc, #48]	; (80006f8 <DHT11_Check_Response+0x58>)
 80006c8:	f000 fe82 	bl	80013d0 <HAL_GPIO_ReadPin>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d002      	beq.n	80006d8 <DHT11_Check_Response+0x38>
 80006d2:	2301      	movs	r3, #1
 80006d4:	71fb      	strb	r3, [r7, #7]
 80006d6:	e001      	b.n	80006dc <DHT11_Check_Response+0x3c>
		else Response = -1; // 255
 80006d8:	23ff      	movs	r3, #255	; 0xff
 80006da:	71fb      	strb	r3, [r7, #7]
	}
	while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));   // wait for the pin to go low
 80006dc:	bf00      	nop
 80006de:	2102      	movs	r1, #2
 80006e0:	4805      	ldr	r0, [pc, #20]	; (80006f8 <DHT11_Check_Response+0x58>)
 80006e2:	f000 fe75 	bl	80013d0 <HAL_GPIO_ReadPin>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d1f8      	bne.n	80006de <DHT11_Check_Response+0x3e>

	return Response;
 80006ec:	79fb      	ldrb	r3, [r7, #7]
}
 80006ee:	4618      	mov	r0, r3
 80006f0:	3708      	adds	r7, #8
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	40020000 	.word	0x40020000

080006fc <DHT11_Read>:

uint8_t DHT11_Read (void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 8000702:	2300      	movs	r3, #0
 8000704:	71bb      	strb	r3, [r7, #6]
 8000706:	e037      	b.n	8000778 <DHT11_Read+0x7c>
	{
		while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));   // wait for the pin to go high
 8000708:	bf00      	nop
 800070a:	2102      	movs	r1, #2
 800070c:	481e      	ldr	r0, [pc, #120]	; (8000788 <DHT11_Read+0x8c>)
 800070e:	f000 fe5f 	bl	80013d0 <HAL_GPIO_ReadPin>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d0f8      	beq.n	800070a <DHT11_Read+0xe>
		delay (40);   // wait for 40 us
 8000718:	2028      	movs	r0, #40	; 0x28
 800071a:	f7ff ff4b 	bl	80005b4 <delay>
		if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))   // if the pin is low
 800071e:	2102      	movs	r1, #2
 8000720:	4819      	ldr	r0, [pc, #100]	; (8000788 <DHT11_Read+0x8c>)
 8000722:	f000 fe55 	bl	80013d0 <HAL_GPIO_ReadPin>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d10e      	bne.n	800074a <DHT11_Read+0x4e>
		{
			i&= ~(1<<(7-j));   // write 0
 800072c:	79bb      	ldrb	r3, [r7, #6]
 800072e:	f1c3 0307 	rsb	r3, r3, #7
 8000732:	2201      	movs	r2, #1
 8000734:	fa02 f303 	lsl.w	r3, r2, r3
 8000738:	b25b      	sxtb	r3, r3
 800073a:	43db      	mvns	r3, r3
 800073c:	b25a      	sxtb	r2, r3
 800073e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000742:	4013      	ands	r3, r2
 8000744:	b25b      	sxtb	r3, r3
 8000746:	71fb      	strb	r3, [r7, #7]
 8000748:	e00b      	b.n	8000762 <DHT11_Read+0x66>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 800074a:	79bb      	ldrb	r3, [r7, #6]
 800074c:	f1c3 0307 	rsb	r3, r3, #7
 8000750:	2201      	movs	r2, #1
 8000752:	fa02 f303 	lsl.w	r3, r2, r3
 8000756:	b25a      	sxtb	r2, r3
 8000758:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800075c:	4313      	orrs	r3, r2
 800075e:	b25b      	sxtb	r3, r3
 8000760:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));  // wait for the pin to go low
 8000762:	bf00      	nop
 8000764:	2102      	movs	r1, #2
 8000766:	4808      	ldr	r0, [pc, #32]	; (8000788 <DHT11_Read+0x8c>)
 8000768:	f000 fe32 	bl	80013d0 <HAL_GPIO_ReadPin>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d1f8      	bne.n	8000764 <DHT11_Read+0x68>
	for (j=0;j<8;j++)
 8000772:	79bb      	ldrb	r3, [r7, #6]
 8000774:	3301      	adds	r3, #1
 8000776:	71bb      	strb	r3, [r7, #6]
 8000778:	79bb      	ldrb	r3, [r7, #6]
 800077a:	2b07      	cmp	r3, #7
 800077c:	d9c4      	bls.n	8000708 <DHT11_Read+0xc>
	}
	return i;
 800077e:	79fb      	ldrb	r3, [r7, #7]
}
 8000780:	4618      	mov	r0, r3
 8000782:	3708      	adds	r7, #8
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	40020000 	.word	0x40020000

0800078c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000790:	f000 fada 	bl	8000d48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000794:	f000 f894 	bl	80008c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000798:	f000 f95a 	bl	8000a50 <MX_GPIO_Init>
  MX_TIM6_Init();
 800079c:	f000 f8f8 	bl	8000990 <MX_TIM6_Init>
  MX_USART1_UART_Init();
 80007a0:	f000 f92c 	bl	80009fc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
 // ESP_Init("COBERTURA 2G", "41265364");
  HAL_TIM_Base_Start(&htim6);
 80007a4:	4839      	ldr	r0, [pc, #228]	; (800088c <main+0x100>)
 80007a6:	f001 fb23 	bl	8001df0 <HAL_TIM_Base_Start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  /********************** DHT11 *********************/
	  DHT11_Start();
 80007aa:	f7ff ff59 	bl	8000660 <DHT11_Start>
	  Presence = DHT11_Check_Response();
 80007ae:	f7ff ff77 	bl	80006a0 <DHT11_Check_Response>
 80007b2:	4603      	mov	r3, r0
 80007b4:	461a      	mov	r2, r3
 80007b6:	4b36      	ldr	r3, [pc, #216]	; (8000890 <main+0x104>)
 80007b8:	701a      	strb	r2, [r3, #0]
	  Rh_byte1 = DHT11_Read ();
 80007ba:	f7ff ff9f 	bl	80006fc <DHT11_Read>
 80007be:	4603      	mov	r3, r0
 80007c0:	461a      	mov	r2, r3
 80007c2:	4b34      	ldr	r3, [pc, #208]	; (8000894 <main+0x108>)
 80007c4:	701a      	strb	r2, [r3, #0]
	  Rh_byte2 = DHT11_Read ();
 80007c6:	f7ff ff99 	bl	80006fc <DHT11_Read>
 80007ca:	4603      	mov	r3, r0
 80007cc:	461a      	mov	r2, r3
 80007ce:	4b32      	ldr	r3, [pc, #200]	; (8000898 <main+0x10c>)
 80007d0:	701a      	strb	r2, [r3, #0]
	  Temp_byte1 = DHT11_Read ();
 80007d2:	f7ff ff93 	bl	80006fc <DHT11_Read>
 80007d6:	4603      	mov	r3, r0
 80007d8:	461a      	mov	r2, r3
 80007da:	4b30      	ldr	r3, [pc, #192]	; (800089c <main+0x110>)
 80007dc:	701a      	strb	r2, [r3, #0]
	  Temp_byte2 = DHT11_Read ();
 80007de:	f7ff ff8d 	bl	80006fc <DHT11_Read>
 80007e2:	4603      	mov	r3, r0
 80007e4:	461a      	mov	r2, r3
 80007e6:	4b2e      	ldr	r3, [pc, #184]	; (80008a0 <main+0x114>)
 80007e8:	701a      	strb	r2, [r3, #0]
	  SUM = DHT11_Read();
 80007ea:	f7ff ff87 	bl	80006fc <DHT11_Read>
 80007ee:	4603      	mov	r3, r0
 80007f0:	b29a      	uxth	r2, r3
 80007f2:	4b2c      	ldr	r3, [pc, #176]	; (80008a4 <main+0x118>)
 80007f4:	801a      	strh	r2, [r3, #0]

	  TEMP = Temp_byte1;
 80007f6:	4b29      	ldr	r3, [pc, #164]	; (800089c <main+0x110>)
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	b29a      	uxth	r2, r3
 80007fc:	4b2a      	ldr	r3, [pc, #168]	; (80008a8 <main+0x11c>)
 80007fe:	801a      	strh	r2, [r3, #0]
	  RH = Rh_byte1;
 8000800:	4b24      	ldr	r3, [pc, #144]	; (8000894 <main+0x108>)
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	b29a      	uxth	r2, r3
 8000806:	4b29      	ldr	r3, [pc, #164]	; (80008ac <main+0x120>)
 8000808:	801a      	strh	r2, [r3, #0]

	  Temperature = (float) TEMP;
 800080a:	4b27      	ldr	r3, [pc, #156]	; (80008a8 <main+0x11c>)
 800080c:	881b      	ldrh	r3, [r3, #0]
 800080e:	ee07 3a90 	vmov	s15, r3
 8000812:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000816:	4b26      	ldr	r3, [pc, #152]	; (80008b0 <main+0x124>)
 8000818:	edc3 7a00 	vstr	s15, [r3]
	  Humidity = (float) RH;
 800081c:	4b23      	ldr	r3, [pc, #140]	; (80008ac <main+0x120>)
 800081e:	881b      	ldrh	r3, [r3, #0]
 8000820:	ee07 3a90 	vmov	s15, r3
 8000824:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000828:	4b22      	ldr	r3, [pc, #136]	; (80008b4 <main+0x128>)
 800082a:	edc3 7a00 	vstr	s15, [r3]
	  if (Temperature>30)
 800082e:	4b20      	ldr	r3, [pc, #128]	; (80008b0 <main+0x124>)
 8000830:	edd3 7a00 	vldr	s15, [r3]
 8000834:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8000838:	eef4 7ac7 	vcmpe.f32	s15, s14
 800083c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000840:	dd05      	ble.n	800084e <main+0xc2>
	  	  {
		  HAL_GPIO_TogglePin(GPIOD, RED_Pin);
 8000842:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000846:	481c      	ldr	r0, [pc, #112]	; (80008b8 <main+0x12c>)
 8000848:	f000 fdf3 	bl	8001432 <HAL_GPIO_TogglePin>
 800084c:	e004      	b.n	8000858 <main+0xcc>
		 // HAL_GPIO_WritePin(GPIOD, BLUE_Pin, GPIO_PIN_RESET);
	  	  }
	  else
	  {
		  HAL_GPIO_TogglePin(GPIOD, BLUE_Pin);
 800084e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000852:	4819      	ldr	r0, [pc, #100]	; (80008b8 <main+0x12c>)
 8000854:	f000 fded 	bl	8001432 <HAL_GPIO_TogglePin>
		  //HAL_GPIO_WritePin(GPIOD, RED_Pin, GPIO_PIN_RESET);

	  }

	  HAL_Delay(1000);
 8000858:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800085c:	f000 fae6 	bl	8000e2c <HAL_Delay>
Value_Buf[0]= Temperature;
 8000860:	4b13      	ldr	r3, [pc, #76]	; (80008b0 <main+0x124>)
 8000862:	edd3 7a00 	vldr	s15, [r3]
 8000866:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800086a:	ee17 3a90 	vmov	r3, s15
 800086e:	b29a      	uxth	r2, r3
 8000870:	4b12      	ldr	r3, [pc, #72]	; (80008bc <main+0x130>)
 8000872:	801a      	strh	r2, [r3, #0]
Value_Buf[1]= Humidity;
 8000874:	4b0f      	ldr	r3, [pc, #60]	; (80008b4 <main+0x128>)
 8000876:	edd3 7a00 	vldr	s15, [r3]
 800087a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800087e:	ee17 3a90 	vmov	r3, s15
 8000882:	b29a      	uxth	r2, r3
 8000884:	4b0d      	ldr	r3, [pc, #52]	; (80008bc <main+0x130>)
 8000886:	805a      	strh	r2, [r3, #2]
	  DHT11_Start();
 8000888:	e78f      	b.n	80007aa <main+0x1e>
 800088a:	bf00      	nop
 800088c:	200000d0 	.word	0x200000d0
 8000890:	20000078 	.word	0x20000078
 8000894:	200000c8 	.word	0x200000c8
 8000898:	200000cf 	.word	0x200000cf
 800089c:	200000ce 	.word	0x200000ce
 80008a0:	2000011e 	.word	0x2000011e
 80008a4:	2000011c 	.word	0x2000011c
 80008a8:	200000cc 	.word	0x200000cc
 80008ac:	200000ca 	.word	0x200000ca
 80008b0:	20000070 	.word	0x20000070
 80008b4:	20000074 	.word	0x20000074
 80008b8:	40020c00 	.word	0x40020c00
 80008bc:	20000118 	.word	0x20000118

080008c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b094      	sub	sp, #80	; 0x50
 80008c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008c6:	f107 0320 	add.w	r3, r7, #32
 80008ca:	2230      	movs	r2, #48	; 0x30
 80008cc:	2100      	movs	r1, #0
 80008ce:	4618      	mov	r0, r3
 80008d0:	f001 fe4c 	bl	800256c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008d4:	f107 030c 	add.w	r3, r7, #12
 80008d8:	2200      	movs	r2, #0
 80008da:	601a      	str	r2, [r3, #0]
 80008dc:	605a      	str	r2, [r3, #4]
 80008de:	609a      	str	r2, [r3, #8]
 80008e0:	60da      	str	r2, [r3, #12]
 80008e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008e4:	2300      	movs	r3, #0
 80008e6:	60bb      	str	r3, [r7, #8]
 80008e8:	4b27      	ldr	r3, [pc, #156]	; (8000988 <SystemClock_Config+0xc8>)
 80008ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ec:	4a26      	ldr	r2, [pc, #152]	; (8000988 <SystemClock_Config+0xc8>)
 80008ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008f2:	6413      	str	r3, [r2, #64]	; 0x40
 80008f4:	4b24      	ldr	r3, [pc, #144]	; (8000988 <SystemClock_Config+0xc8>)
 80008f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008fc:	60bb      	str	r3, [r7, #8]
 80008fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000900:	2300      	movs	r3, #0
 8000902:	607b      	str	r3, [r7, #4]
 8000904:	4b21      	ldr	r3, [pc, #132]	; (800098c <SystemClock_Config+0xcc>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4a20      	ldr	r2, [pc, #128]	; (800098c <SystemClock_Config+0xcc>)
 800090a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800090e:	6013      	str	r3, [r2, #0]
 8000910:	4b1e      	ldr	r3, [pc, #120]	; (800098c <SystemClock_Config+0xcc>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000918:	607b      	str	r3, [r7, #4]
 800091a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800091c:	2301      	movs	r3, #1
 800091e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000920:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000924:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000926:	2302      	movs	r3, #2
 8000928:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800092a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800092e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000930:	2304      	movs	r3, #4
 8000932:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000934:	2332      	movs	r3, #50	; 0x32
 8000936:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000938:	2302      	movs	r3, #2
 800093a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800093c:	2304      	movs	r3, #4
 800093e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000940:	f107 0320 	add.w	r3, r7, #32
 8000944:	4618      	mov	r0, r3
 8000946:	f000 fd8f 	bl	8001468 <HAL_RCC_OscConfig>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000950:	f000 f8e6 	bl	8000b20 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000954:	230f      	movs	r3, #15
 8000956:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000958:	2302      	movs	r3, #2
 800095a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800095c:	2300      	movs	r3, #0
 800095e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000960:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000964:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000966:	2300      	movs	r3, #0
 8000968:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800096a:	f107 030c 	add.w	r3, r7, #12
 800096e:	2101      	movs	r1, #1
 8000970:	4618      	mov	r0, r3
 8000972:	f000 fff1 	bl	8001958 <HAL_RCC_ClockConfig>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800097c:	f000 f8d0 	bl	8000b20 <Error_Handler>
  }
}
 8000980:	bf00      	nop
 8000982:	3750      	adds	r7, #80	; 0x50
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	40023800 	.word	0x40023800
 800098c:	40007000 	.word	0x40007000

08000990 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000996:	463b      	mov	r3, r7
 8000998:	2200      	movs	r2, #0
 800099a:	601a      	str	r2, [r3, #0]
 800099c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800099e:	4b15      	ldr	r3, [pc, #84]	; (80009f4 <MX_TIM6_Init+0x64>)
 80009a0:	4a15      	ldr	r2, [pc, #84]	; (80009f8 <MX_TIM6_Init+0x68>)
 80009a2:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 50-1;
 80009a4:	4b13      	ldr	r3, [pc, #76]	; (80009f4 <MX_TIM6_Init+0x64>)
 80009a6:	2231      	movs	r2, #49	; 0x31
 80009a8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009aa:	4b12      	ldr	r3, [pc, #72]	; (80009f4 <MX_TIM6_Init+0x64>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 0xffff-1;
 80009b0:	4b10      	ldr	r3, [pc, #64]	; (80009f4 <MX_TIM6_Init+0x64>)
 80009b2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80009b6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009b8:	4b0e      	ldr	r3, [pc, #56]	; (80009f4 <MX_TIM6_Init+0x64>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80009be:	480d      	ldr	r0, [pc, #52]	; (80009f4 <MX_TIM6_Init+0x64>)
 80009c0:	f001 f9c6 	bl	8001d50 <HAL_TIM_Base_Init>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80009ca:	f000 f8a9 	bl	8000b20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009ce:	2300      	movs	r3, #0
 80009d0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009d2:	2300      	movs	r3, #0
 80009d4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80009d6:	463b      	mov	r3, r7
 80009d8:	4619      	mov	r1, r3
 80009da:	4806      	ldr	r0, [pc, #24]	; (80009f4 <MX_TIM6_Init+0x64>)
 80009dc:	f001 fb10 	bl	8002000 <HAL_TIMEx_MasterConfigSynchronization>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80009e6:	f000 f89b 	bl	8000b20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80009ea:	bf00      	nop
 80009ec:	3708      	adds	r7, #8
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	200000d0 	.word	0x200000d0
 80009f8:	40001000 	.word	0x40001000

080009fc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a00:	4b11      	ldr	r3, [pc, #68]	; (8000a48 <MX_USART1_UART_Init+0x4c>)
 8000a02:	4a12      	ldr	r2, [pc, #72]	; (8000a4c <MX_USART1_UART_Init+0x50>)
 8000a04:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a06:	4b10      	ldr	r3, [pc, #64]	; (8000a48 <MX_USART1_UART_Init+0x4c>)
 8000a08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a0c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a0e:	4b0e      	ldr	r3, [pc, #56]	; (8000a48 <MX_USART1_UART_Init+0x4c>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a14:	4b0c      	ldr	r3, [pc, #48]	; (8000a48 <MX_USART1_UART_Init+0x4c>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a1a:	4b0b      	ldr	r3, [pc, #44]	; (8000a48 <MX_USART1_UART_Init+0x4c>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a20:	4b09      	ldr	r3, [pc, #36]	; (8000a48 <MX_USART1_UART_Init+0x4c>)
 8000a22:	220c      	movs	r2, #12
 8000a24:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a26:	4b08      	ldr	r3, [pc, #32]	; (8000a48 <MX_USART1_UART_Init+0x4c>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a2c:	4b06      	ldr	r3, [pc, #24]	; (8000a48 <MX_USART1_UART_Init+0x4c>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a32:	4805      	ldr	r0, [pc, #20]	; (8000a48 <MX_USART1_UART_Init+0x4c>)
 8000a34:	f001 fb60 	bl	80020f8 <HAL_UART_Init>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000a3e:	f000 f86f 	bl	8000b20 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a42:	bf00      	nop
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	20000084 	.word	0x20000084
 8000a4c:	40011000 	.word	0x40011000

08000a50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b088      	sub	sp, #32
 8000a54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a56:	f107 030c 	add.w	r3, r7, #12
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	601a      	str	r2, [r3, #0]
 8000a5e:	605a      	str	r2, [r3, #4]
 8000a60:	609a      	str	r2, [r3, #8]
 8000a62:	60da      	str	r2, [r3, #12]
 8000a64:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a66:	2300      	movs	r3, #0
 8000a68:	60bb      	str	r3, [r7, #8]
 8000a6a:	4b2a      	ldr	r3, [pc, #168]	; (8000b14 <MX_GPIO_Init+0xc4>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	4a29      	ldr	r2, [pc, #164]	; (8000b14 <MX_GPIO_Init+0xc4>)
 8000a70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a74:	6313      	str	r3, [r2, #48]	; 0x30
 8000a76:	4b27      	ldr	r3, [pc, #156]	; (8000b14 <MX_GPIO_Init+0xc4>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a7e:	60bb      	str	r3, [r7, #8]
 8000a80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a82:	2300      	movs	r3, #0
 8000a84:	607b      	str	r3, [r7, #4]
 8000a86:	4b23      	ldr	r3, [pc, #140]	; (8000b14 <MX_GPIO_Init+0xc4>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	4a22      	ldr	r2, [pc, #136]	; (8000b14 <MX_GPIO_Init+0xc4>)
 8000a8c:	f043 0301 	orr.w	r3, r3, #1
 8000a90:	6313      	str	r3, [r2, #48]	; 0x30
 8000a92:	4b20      	ldr	r3, [pc, #128]	; (8000b14 <MX_GPIO_Init+0xc4>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	f003 0301 	and.w	r3, r3, #1
 8000a9a:	607b      	str	r3, [r7, #4]
 8000a9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	603b      	str	r3, [r7, #0]
 8000aa2:	4b1c      	ldr	r3, [pc, #112]	; (8000b14 <MX_GPIO_Init+0xc4>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	4a1b      	ldr	r2, [pc, #108]	; (8000b14 <MX_GPIO_Init+0xc4>)
 8000aa8:	f043 0308 	orr.w	r3, r3, #8
 8000aac:	6313      	str	r3, [r2, #48]	; 0x30
 8000aae:	4b19      	ldr	r3, [pc, #100]	; (8000b14 <MX_GPIO_Init+0xc4>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	f003 0308 	and.w	r3, r3, #8
 8000ab6:	603b      	str	r3, [r7, #0]
 8000ab8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000aba:	2200      	movs	r2, #0
 8000abc:	2102      	movs	r1, #2
 8000abe:	4816      	ldr	r0, [pc, #88]	; (8000b18 <MX_GPIO_Init+0xc8>)
 8000ac0:	f000 fc9e 	bl	8001400 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RED_Pin|BLUE_Pin, GPIO_PIN_RESET);
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8000aca:	4814      	ldr	r0, [pc, #80]	; (8000b1c <MX_GPIO_Init+0xcc>)
 8000acc:	f000 fc98 	bl	8001400 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000ad0:	2302      	movs	r3, #2
 8000ad2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000adc:	2300      	movs	r3, #0
 8000ade:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae0:	f107 030c 	add.w	r3, r7, #12
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	480c      	ldr	r0, [pc, #48]	; (8000b18 <MX_GPIO_Init+0xc8>)
 8000ae8:	f000 fad6 	bl	8001098 <HAL_GPIO_Init>

  /*Configure GPIO pins : RED_Pin BLUE_Pin */
  GPIO_InitStruct.Pin = RED_Pin|BLUE_Pin;
 8000aec:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000af0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af2:	2301      	movs	r3, #1
 8000af4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af6:	2300      	movs	r3, #0
 8000af8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afa:	2300      	movs	r3, #0
 8000afc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000afe:	f107 030c 	add.w	r3, r7, #12
 8000b02:	4619      	mov	r1, r3
 8000b04:	4805      	ldr	r0, [pc, #20]	; (8000b1c <MX_GPIO_Init+0xcc>)
 8000b06:	f000 fac7 	bl	8001098 <HAL_GPIO_Init>

}
 8000b0a:	bf00      	nop
 8000b0c:	3720      	adds	r7, #32
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	40023800 	.word	0x40023800
 8000b18:	40020000 	.word	0x40020000
 8000b1c:	40020c00 	.word	0x40020c00

08000b20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b24:	b672      	cpsid	i
}
 8000b26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b28:	e7fe      	b.n	8000b28 <Error_Handler+0x8>
	...

08000b2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b32:	2300      	movs	r3, #0
 8000b34:	607b      	str	r3, [r7, #4]
 8000b36:	4b10      	ldr	r3, [pc, #64]	; (8000b78 <HAL_MspInit+0x4c>)
 8000b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b3a:	4a0f      	ldr	r2, [pc, #60]	; (8000b78 <HAL_MspInit+0x4c>)
 8000b3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b40:	6453      	str	r3, [r2, #68]	; 0x44
 8000b42:	4b0d      	ldr	r3, [pc, #52]	; (8000b78 <HAL_MspInit+0x4c>)
 8000b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b4a:	607b      	str	r3, [r7, #4]
 8000b4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b4e:	2300      	movs	r3, #0
 8000b50:	603b      	str	r3, [r7, #0]
 8000b52:	4b09      	ldr	r3, [pc, #36]	; (8000b78 <HAL_MspInit+0x4c>)
 8000b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b56:	4a08      	ldr	r2, [pc, #32]	; (8000b78 <HAL_MspInit+0x4c>)
 8000b58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b5c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b5e:	4b06      	ldr	r3, [pc, #24]	; (8000b78 <HAL_MspInit+0x4c>)
 8000b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b66:	603b      	str	r3, [r7, #0]
 8000b68:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b6a:	bf00      	nop
 8000b6c:	370c      	adds	r7, #12
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	40023800 	.word	0x40023800

08000b7c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b085      	sub	sp, #20
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a0b      	ldr	r2, [pc, #44]	; (8000bb8 <HAL_TIM_Base_MspInit+0x3c>)
 8000b8a:	4293      	cmp	r3, r2
 8000b8c:	d10d      	bne.n	8000baa <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000b8e:	2300      	movs	r3, #0
 8000b90:	60fb      	str	r3, [r7, #12]
 8000b92:	4b0a      	ldr	r3, [pc, #40]	; (8000bbc <HAL_TIM_Base_MspInit+0x40>)
 8000b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b96:	4a09      	ldr	r2, [pc, #36]	; (8000bbc <HAL_TIM_Base_MspInit+0x40>)
 8000b98:	f043 0310 	orr.w	r3, r3, #16
 8000b9c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b9e:	4b07      	ldr	r3, [pc, #28]	; (8000bbc <HAL_TIM_Base_MspInit+0x40>)
 8000ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba2:	f003 0310 	and.w	r3, r3, #16
 8000ba6:	60fb      	str	r3, [r7, #12]
 8000ba8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000baa:	bf00      	nop
 8000bac:	3714      	adds	r7, #20
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	40001000 	.word	0x40001000
 8000bbc:	40023800 	.word	0x40023800

08000bc0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b08a      	sub	sp, #40	; 0x28
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc8:	f107 0314 	add.w	r3, r7, #20
 8000bcc:	2200      	movs	r2, #0
 8000bce:	601a      	str	r2, [r3, #0]
 8000bd0:	605a      	str	r2, [r3, #4]
 8000bd2:	609a      	str	r2, [r3, #8]
 8000bd4:	60da      	str	r2, [r3, #12]
 8000bd6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a1d      	ldr	r2, [pc, #116]	; (8000c54 <HAL_UART_MspInit+0x94>)
 8000bde:	4293      	cmp	r3, r2
 8000be0:	d134      	bne.n	8000c4c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000be2:	2300      	movs	r3, #0
 8000be4:	613b      	str	r3, [r7, #16]
 8000be6:	4b1c      	ldr	r3, [pc, #112]	; (8000c58 <HAL_UART_MspInit+0x98>)
 8000be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bea:	4a1b      	ldr	r2, [pc, #108]	; (8000c58 <HAL_UART_MspInit+0x98>)
 8000bec:	f043 0310 	orr.w	r3, r3, #16
 8000bf0:	6453      	str	r3, [r2, #68]	; 0x44
 8000bf2:	4b19      	ldr	r3, [pc, #100]	; (8000c58 <HAL_UART_MspInit+0x98>)
 8000bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bf6:	f003 0310 	and.w	r3, r3, #16
 8000bfa:	613b      	str	r3, [r7, #16]
 8000bfc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bfe:	2300      	movs	r3, #0
 8000c00:	60fb      	str	r3, [r7, #12]
 8000c02:	4b15      	ldr	r3, [pc, #84]	; (8000c58 <HAL_UART_MspInit+0x98>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c06:	4a14      	ldr	r2, [pc, #80]	; (8000c58 <HAL_UART_MspInit+0x98>)
 8000c08:	f043 0301 	orr.w	r3, r3, #1
 8000c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c0e:	4b12      	ldr	r3, [pc, #72]	; (8000c58 <HAL_UART_MspInit+0x98>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c12:	f003 0301 	and.w	r3, r3, #1
 8000c16:	60fb      	str	r3, [r7, #12]
 8000c18:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000c1a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000c1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c20:	2302      	movs	r3, #2
 8000c22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c24:	2300      	movs	r3, #0
 8000c26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c28:	2303      	movs	r3, #3
 8000c2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c2c:	2307      	movs	r3, #7
 8000c2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c30:	f107 0314 	add.w	r3, r7, #20
 8000c34:	4619      	mov	r1, r3
 8000c36:	4809      	ldr	r0, [pc, #36]	; (8000c5c <HAL_UART_MspInit+0x9c>)
 8000c38:	f000 fa2e 	bl	8001098 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	2100      	movs	r1, #0
 8000c40:	2025      	movs	r0, #37	; 0x25
 8000c42:	f000 f9f2 	bl	800102a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000c46:	2025      	movs	r0, #37	; 0x25
 8000c48:	f000 fa0b 	bl	8001062 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000c4c:	bf00      	nop
 8000c4e:	3728      	adds	r7, #40	; 0x28
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	40011000 	.word	0x40011000
 8000c58:	40023800 	.word	0x40023800
 8000c5c:	40020000 	.word	0x40020000

08000c60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000c64:	bf00      	nop
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr

08000c6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c6e:	b480      	push	{r7}
 8000c70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c72:	e7fe      	b.n	8000c72 <HardFault_Handler+0x4>

08000c74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c78:	e7fe      	b.n	8000c78 <MemManage_Handler+0x4>

08000c7a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c7a:	b480      	push	{r7}
 8000c7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c7e:	e7fe      	b.n	8000c7e <BusFault_Handler+0x4>

08000c80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c84:	e7fe      	b.n	8000c84 <UsageFault_Handler+0x4>

08000c86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c86:	b480      	push	{r7}
 8000c88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c8a:	bf00      	nop
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr

08000c94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c98:	bf00      	nop
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr

08000ca2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ca6:	bf00      	nop
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr

08000cb0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cb4:	f000 f89a 	bl	8000dec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cb8:	bf00      	nop
 8000cba:	bd80      	pop	{r7, pc}

08000cbc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	Uart_isr(&huart1);
 8000cc0:	4802      	ldr	r0, [pc, #8]	; (8000ccc <USART1_IRQHandler+0x10>)
 8000cc2:	f7ff fc1d 	bl	8000500 <Uart_isr>
  /* USER CODE END USART1_IRQn 0 */
//  HAL_UART_IRQHandler(&huart1);
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000cc6:	bf00      	nop
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	20000084 	.word	0x20000084

08000cd0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cd4:	4b06      	ldr	r3, [pc, #24]	; (8000cf0 <SystemInit+0x20>)
 8000cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cda:	4a05      	ldr	r2, [pc, #20]	; (8000cf0 <SystemInit+0x20>)
 8000cdc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ce0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ce4:	bf00      	nop
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	e000ed00 	.word	0xe000ed00

08000cf4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000cf4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d2c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cf8:	480d      	ldr	r0, [pc, #52]	; (8000d30 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000cfa:	490e      	ldr	r1, [pc, #56]	; (8000d34 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000cfc:	4a0e      	ldr	r2, [pc, #56]	; (8000d38 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cfe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d00:	e002      	b.n	8000d08 <LoopCopyDataInit>

08000d02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d06:	3304      	adds	r3, #4

08000d08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d0c:	d3f9      	bcc.n	8000d02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d0e:	4a0b      	ldr	r2, [pc, #44]	; (8000d3c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d10:	4c0b      	ldr	r4, [pc, #44]	; (8000d40 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d14:	e001      	b.n	8000d1a <LoopFillZerobss>

08000d16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d18:	3204      	adds	r2, #4

08000d1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d1c:	d3fb      	bcc.n	8000d16 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000d1e:	f7ff ffd7 	bl	8000cd0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d22:	f001 fbff 	bl	8002524 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d26:	f7ff fd31 	bl	800078c <main>
  bx  lr    
 8000d2a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d2c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d34:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d38:	080025bc 	.word	0x080025bc
  ldr r2, =_sbss
 8000d3c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000d40:	20000124 	.word	0x20000124

08000d44 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d44:	e7fe      	b.n	8000d44 <ADC_IRQHandler>
	...

08000d48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d4c:	4b0e      	ldr	r3, [pc, #56]	; (8000d88 <HAL_Init+0x40>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a0d      	ldr	r2, [pc, #52]	; (8000d88 <HAL_Init+0x40>)
 8000d52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d56:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d58:	4b0b      	ldr	r3, [pc, #44]	; (8000d88 <HAL_Init+0x40>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a0a      	ldr	r2, [pc, #40]	; (8000d88 <HAL_Init+0x40>)
 8000d5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d62:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d64:	4b08      	ldr	r3, [pc, #32]	; (8000d88 <HAL_Init+0x40>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a07      	ldr	r2, [pc, #28]	; (8000d88 <HAL_Init+0x40>)
 8000d6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d6e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d70:	2003      	movs	r0, #3
 8000d72:	f000 f94f 	bl	8001014 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d76:	2000      	movs	r0, #0
 8000d78:	f000 f808 	bl	8000d8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d7c:	f7ff fed6 	bl	8000b2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d80:	2300      	movs	r3, #0
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	40023c00 	.word	0x40023c00

08000d8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d94:	4b12      	ldr	r3, [pc, #72]	; (8000de0 <HAL_InitTick+0x54>)
 8000d96:	681a      	ldr	r2, [r3, #0]
 8000d98:	4b12      	ldr	r3, [pc, #72]	; (8000de4 <HAL_InitTick+0x58>)
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000da2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000da6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000daa:	4618      	mov	r0, r3
 8000dac:	f000 f967 	bl	800107e <HAL_SYSTICK_Config>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000db6:	2301      	movs	r3, #1
 8000db8:	e00e      	b.n	8000dd8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	2b0f      	cmp	r3, #15
 8000dbe:	d80a      	bhi.n	8000dd6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	6879      	ldr	r1, [r7, #4]
 8000dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8000dc8:	f000 f92f 	bl	800102a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dcc:	4a06      	ldr	r2, [pc, #24]	; (8000de8 <HAL_InitTick+0x5c>)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	e000      	b.n	8000dd8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dd6:	2301      	movs	r3, #1
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	3708      	adds	r7, #8
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	20000000 	.word	0x20000000
 8000de4:	20000008 	.word	0x20000008
 8000de8:	20000004 	.word	0x20000004

08000dec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000df0:	4b06      	ldr	r3, [pc, #24]	; (8000e0c <HAL_IncTick+0x20>)
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	461a      	mov	r2, r3
 8000df6:	4b06      	ldr	r3, [pc, #24]	; (8000e10 <HAL_IncTick+0x24>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	4413      	add	r3, r2
 8000dfc:	4a04      	ldr	r2, [pc, #16]	; (8000e10 <HAL_IncTick+0x24>)
 8000dfe:	6013      	str	r3, [r2, #0]
}
 8000e00:	bf00      	nop
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	20000008 	.word	0x20000008
 8000e10:	20000120 	.word	0x20000120

08000e14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  return uwTick;
 8000e18:	4b03      	ldr	r3, [pc, #12]	; (8000e28 <HAL_GetTick+0x14>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	20000120 	.word	0x20000120

08000e2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b084      	sub	sp, #16
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e34:	f7ff ffee 	bl	8000e14 <HAL_GetTick>
 8000e38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e44:	d005      	beq.n	8000e52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e46:	4b0a      	ldr	r3, [pc, #40]	; (8000e70 <HAL_Delay+0x44>)
 8000e48:	781b      	ldrb	r3, [r3, #0]
 8000e4a:	461a      	mov	r2, r3
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	4413      	add	r3, r2
 8000e50:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e52:	bf00      	nop
 8000e54:	f7ff ffde 	bl	8000e14 <HAL_GetTick>
 8000e58:	4602      	mov	r2, r0
 8000e5a:	68bb      	ldr	r3, [r7, #8]
 8000e5c:	1ad3      	subs	r3, r2, r3
 8000e5e:	68fa      	ldr	r2, [r7, #12]
 8000e60:	429a      	cmp	r2, r3
 8000e62:	d8f7      	bhi.n	8000e54 <HAL_Delay+0x28>
  {
  }
}
 8000e64:	bf00      	nop
 8000e66:	bf00      	nop
 8000e68:	3710      	adds	r7, #16
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	20000008 	.word	0x20000008

08000e74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b085      	sub	sp, #20
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	f003 0307 	and.w	r3, r3, #7
 8000e82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e84:	4b0c      	ldr	r3, [pc, #48]	; (8000eb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000e86:	68db      	ldr	r3, [r3, #12]
 8000e88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e8a:	68ba      	ldr	r2, [r7, #8]
 8000e8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e90:	4013      	ands	r3, r2
 8000e92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e98:	68bb      	ldr	r3, [r7, #8]
 8000e9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ea0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ea4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ea6:	4a04      	ldr	r2, [pc, #16]	; (8000eb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	60d3      	str	r3, [r2, #12]
}
 8000eac:	bf00      	nop
 8000eae:	3714      	adds	r7, #20
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr
 8000eb8:	e000ed00 	.word	0xe000ed00

08000ebc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ec0:	4b04      	ldr	r3, [pc, #16]	; (8000ed4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ec2:	68db      	ldr	r3, [r3, #12]
 8000ec4:	0a1b      	lsrs	r3, r3, #8
 8000ec6:	f003 0307 	and.w	r3, r3, #7
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr
 8000ed4:	e000ed00 	.word	0xe000ed00

08000ed8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	4603      	mov	r3, r0
 8000ee0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	db0b      	blt.n	8000f02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eea:	79fb      	ldrb	r3, [r7, #7]
 8000eec:	f003 021f 	and.w	r2, r3, #31
 8000ef0:	4907      	ldr	r1, [pc, #28]	; (8000f10 <__NVIC_EnableIRQ+0x38>)
 8000ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef6:	095b      	lsrs	r3, r3, #5
 8000ef8:	2001      	movs	r0, #1
 8000efa:	fa00 f202 	lsl.w	r2, r0, r2
 8000efe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f02:	bf00      	nop
 8000f04:	370c      	adds	r7, #12
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	e000e100 	.word	0xe000e100

08000f14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	6039      	str	r1, [r7, #0]
 8000f1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	db0a      	blt.n	8000f3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	b2da      	uxtb	r2, r3
 8000f2c:	490c      	ldr	r1, [pc, #48]	; (8000f60 <__NVIC_SetPriority+0x4c>)
 8000f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f32:	0112      	lsls	r2, r2, #4
 8000f34:	b2d2      	uxtb	r2, r2
 8000f36:	440b      	add	r3, r1
 8000f38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f3c:	e00a      	b.n	8000f54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	b2da      	uxtb	r2, r3
 8000f42:	4908      	ldr	r1, [pc, #32]	; (8000f64 <__NVIC_SetPriority+0x50>)
 8000f44:	79fb      	ldrb	r3, [r7, #7]
 8000f46:	f003 030f 	and.w	r3, r3, #15
 8000f4a:	3b04      	subs	r3, #4
 8000f4c:	0112      	lsls	r2, r2, #4
 8000f4e:	b2d2      	uxtb	r2, r2
 8000f50:	440b      	add	r3, r1
 8000f52:	761a      	strb	r2, [r3, #24]
}
 8000f54:	bf00      	nop
 8000f56:	370c      	adds	r7, #12
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr
 8000f60:	e000e100 	.word	0xe000e100
 8000f64:	e000ed00 	.word	0xe000ed00

08000f68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b089      	sub	sp, #36	; 0x24
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	60f8      	str	r0, [r7, #12]
 8000f70:	60b9      	str	r1, [r7, #8]
 8000f72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	f003 0307 	and.w	r3, r3, #7
 8000f7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f7c:	69fb      	ldr	r3, [r7, #28]
 8000f7e:	f1c3 0307 	rsb	r3, r3, #7
 8000f82:	2b04      	cmp	r3, #4
 8000f84:	bf28      	it	cs
 8000f86:	2304      	movcs	r3, #4
 8000f88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	3304      	adds	r3, #4
 8000f8e:	2b06      	cmp	r3, #6
 8000f90:	d902      	bls.n	8000f98 <NVIC_EncodePriority+0x30>
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	3b03      	subs	r3, #3
 8000f96:	e000      	b.n	8000f9a <NVIC_EncodePriority+0x32>
 8000f98:	2300      	movs	r3, #0
 8000f9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f9c:	f04f 32ff 	mov.w	r2, #4294967295
 8000fa0:	69bb      	ldr	r3, [r7, #24]
 8000fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa6:	43da      	mvns	r2, r3
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	401a      	ands	r2, r3
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fb0:	f04f 31ff 	mov.w	r1, #4294967295
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	fa01 f303 	lsl.w	r3, r1, r3
 8000fba:	43d9      	mvns	r1, r3
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fc0:	4313      	orrs	r3, r2
         );
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3724      	adds	r7, #36	; 0x24
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
	...

08000fd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	3b01      	subs	r3, #1
 8000fdc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fe0:	d301      	bcc.n	8000fe6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	e00f      	b.n	8001006 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fe6:	4a0a      	ldr	r2, [pc, #40]	; (8001010 <SysTick_Config+0x40>)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	3b01      	subs	r3, #1
 8000fec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fee:	210f      	movs	r1, #15
 8000ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ff4:	f7ff ff8e 	bl	8000f14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ff8:	4b05      	ldr	r3, [pc, #20]	; (8001010 <SysTick_Config+0x40>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ffe:	4b04      	ldr	r3, [pc, #16]	; (8001010 <SysTick_Config+0x40>)
 8001000:	2207      	movs	r2, #7
 8001002:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001004:	2300      	movs	r3, #0
}
 8001006:	4618      	mov	r0, r3
 8001008:	3708      	adds	r7, #8
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	e000e010 	.word	0xe000e010

08001014 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800101c:	6878      	ldr	r0, [r7, #4]
 800101e:	f7ff ff29 	bl	8000e74 <__NVIC_SetPriorityGrouping>
}
 8001022:	bf00      	nop
 8001024:	3708      	adds	r7, #8
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}

0800102a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800102a:	b580      	push	{r7, lr}
 800102c:	b086      	sub	sp, #24
 800102e:	af00      	add	r7, sp, #0
 8001030:	4603      	mov	r3, r0
 8001032:	60b9      	str	r1, [r7, #8]
 8001034:	607a      	str	r2, [r7, #4]
 8001036:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001038:	2300      	movs	r3, #0
 800103a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800103c:	f7ff ff3e 	bl	8000ebc <__NVIC_GetPriorityGrouping>
 8001040:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001042:	687a      	ldr	r2, [r7, #4]
 8001044:	68b9      	ldr	r1, [r7, #8]
 8001046:	6978      	ldr	r0, [r7, #20]
 8001048:	f7ff ff8e 	bl	8000f68 <NVIC_EncodePriority>
 800104c:	4602      	mov	r2, r0
 800104e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001052:	4611      	mov	r1, r2
 8001054:	4618      	mov	r0, r3
 8001056:	f7ff ff5d 	bl	8000f14 <__NVIC_SetPriority>
}
 800105a:	bf00      	nop
 800105c:	3718      	adds	r7, #24
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}

08001062 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001062:	b580      	push	{r7, lr}
 8001064:	b082      	sub	sp, #8
 8001066:	af00      	add	r7, sp, #0
 8001068:	4603      	mov	r3, r0
 800106a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800106c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001070:	4618      	mov	r0, r3
 8001072:	f7ff ff31 	bl	8000ed8 <__NVIC_EnableIRQ>
}
 8001076:	bf00      	nop
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}

0800107e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800107e:	b580      	push	{r7, lr}
 8001080:	b082      	sub	sp, #8
 8001082:	af00      	add	r7, sp, #0
 8001084:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001086:	6878      	ldr	r0, [r7, #4]
 8001088:	f7ff ffa2 	bl	8000fd0 <SysTick_Config>
 800108c:	4603      	mov	r3, r0
}
 800108e:	4618      	mov	r0, r3
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
	...

08001098 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001098:	b480      	push	{r7}
 800109a:	b089      	sub	sp, #36	; 0x24
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010a2:	2300      	movs	r3, #0
 80010a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010a6:	2300      	movs	r3, #0
 80010a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010aa:	2300      	movs	r3, #0
 80010ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010ae:	2300      	movs	r3, #0
 80010b0:	61fb      	str	r3, [r7, #28]
 80010b2:	e16b      	b.n	800138c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010b4:	2201      	movs	r2, #1
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	fa02 f303 	lsl.w	r3, r2, r3
 80010bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	697a      	ldr	r2, [r7, #20]
 80010c4:	4013      	ands	r3, r2
 80010c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010c8:	693a      	ldr	r2, [r7, #16]
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	429a      	cmp	r2, r3
 80010ce:	f040 815a 	bne.w	8001386 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	f003 0303 	and.w	r3, r3, #3
 80010da:	2b01      	cmp	r3, #1
 80010dc:	d005      	beq.n	80010ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010e6:	2b02      	cmp	r3, #2
 80010e8:	d130      	bne.n	800114c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	689b      	ldr	r3, [r3, #8]
 80010ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010f0:	69fb      	ldr	r3, [r7, #28]
 80010f2:	005b      	lsls	r3, r3, #1
 80010f4:	2203      	movs	r2, #3
 80010f6:	fa02 f303 	lsl.w	r3, r2, r3
 80010fa:	43db      	mvns	r3, r3
 80010fc:	69ba      	ldr	r2, [r7, #24]
 80010fe:	4013      	ands	r3, r2
 8001100:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	68da      	ldr	r2, [r3, #12]
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	005b      	lsls	r3, r3, #1
 800110a:	fa02 f303 	lsl.w	r3, r2, r3
 800110e:	69ba      	ldr	r2, [r7, #24]
 8001110:	4313      	orrs	r3, r2
 8001112:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	69ba      	ldr	r2, [r7, #24]
 8001118:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001120:	2201      	movs	r2, #1
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	fa02 f303 	lsl.w	r3, r2, r3
 8001128:	43db      	mvns	r3, r3
 800112a:	69ba      	ldr	r2, [r7, #24]
 800112c:	4013      	ands	r3, r2
 800112e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	091b      	lsrs	r3, r3, #4
 8001136:	f003 0201 	and.w	r2, r3, #1
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	fa02 f303 	lsl.w	r3, r2, r3
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	4313      	orrs	r3, r2
 8001144:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	69ba      	ldr	r2, [r7, #24]
 800114a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	f003 0303 	and.w	r3, r3, #3
 8001154:	2b03      	cmp	r3, #3
 8001156:	d017      	beq.n	8001188 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	005b      	lsls	r3, r3, #1
 8001162:	2203      	movs	r2, #3
 8001164:	fa02 f303 	lsl.w	r3, r2, r3
 8001168:	43db      	mvns	r3, r3
 800116a:	69ba      	ldr	r2, [r7, #24]
 800116c:	4013      	ands	r3, r2
 800116e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	689a      	ldr	r2, [r3, #8]
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	005b      	lsls	r3, r3, #1
 8001178:	fa02 f303 	lsl.w	r3, r2, r3
 800117c:	69ba      	ldr	r2, [r7, #24]
 800117e:	4313      	orrs	r3, r2
 8001180:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	69ba      	ldr	r2, [r7, #24]
 8001186:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	f003 0303 	and.w	r3, r3, #3
 8001190:	2b02      	cmp	r3, #2
 8001192:	d123      	bne.n	80011dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001194:	69fb      	ldr	r3, [r7, #28]
 8001196:	08da      	lsrs	r2, r3, #3
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	3208      	adds	r2, #8
 800119c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	f003 0307 	and.w	r3, r3, #7
 80011a8:	009b      	lsls	r3, r3, #2
 80011aa:	220f      	movs	r2, #15
 80011ac:	fa02 f303 	lsl.w	r3, r2, r3
 80011b0:	43db      	mvns	r3, r3
 80011b2:	69ba      	ldr	r2, [r7, #24]
 80011b4:	4013      	ands	r3, r2
 80011b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	691a      	ldr	r2, [r3, #16]
 80011bc:	69fb      	ldr	r3, [r7, #28]
 80011be:	f003 0307 	and.w	r3, r3, #7
 80011c2:	009b      	lsls	r3, r3, #2
 80011c4:	fa02 f303 	lsl.w	r3, r2, r3
 80011c8:	69ba      	ldr	r2, [r7, #24]
 80011ca:	4313      	orrs	r3, r2
 80011cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	08da      	lsrs	r2, r3, #3
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	3208      	adds	r2, #8
 80011d6:	69b9      	ldr	r1, [r7, #24]
 80011d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	005b      	lsls	r3, r3, #1
 80011e6:	2203      	movs	r2, #3
 80011e8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ec:	43db      	mvns	r3, r3
 80011ee:	69ba      	ldr	r2, [r7, #24]
 80011f0:	4013      	ands	r3, r2
 80011f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f003 0203 	and.w	r2, r3, #3
 80011fc:	69fb      	ldr	r3, [r7, #28]
 80011fe:	005b      	lsls	r3, r3, #1
 8001200:	fa02 f303 	lsl.w	r3, r2, r3
 8001204:	69ba      	ldr	r2, [r7, #24]
 8001206:	4313      	orrs	r3, r2
 8001208:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	69ba      	ldr	r2, [r7, #24]
 800120e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001218:	2b00      	cmp	r3, #0
 800121a:	f000 80b4 	beq.w	8001386 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800121e:	2300      	movs	r3, #0
 8001220:	60fb      	str	r3, [r7, #12]
 8001222:	4b60      	ldr	r3, [pc, #384]	; (80013a4 <HAL_GPIO_Init+0x30c>)
 8001224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001226:	4a5f      	ldr	r2, [pc, #380]	; (80013a4 <HAL_GPIO_Init+0x30c>)
 8001228:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800122c:	6453      	str	r3, [r2, #68]	; 0x44
 800122e:	4b5d      	ldr	r3, [pc, #372]	; (80013a4 <HAL_GPIO_Init+0x30c>)
 8001230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001232:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001236:	60fb      	str	r3, [r7, #12]
 8001238:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800123a:	4a5b      	ldr	r2, [pc, #364]	; (80013a8 <HAL_GPIO_Init+0x310>)
 800123c:	69fb      	ldr	r3, [r7, #28]
 800123e:	089b      	lsrs	r3, r3, #2
 8001240:	3302      	adds	r3, #2
 8001242:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001246:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001248:	69fb      	ldr	r3, [r7, #28]
 800124a:	f003 0303 	and.w	r3, r3, #3
 800124e:	009b      	lsls	r3, r3, #2
 8001250:	220f      	movs	r2, #15
 8001252:	fa02 f303 	lsl.w	r3, r2, r3
 8001256:	43db      	mvns	r3, r3
 8001258:	69ba      	ldr	r2, [r7, #24]
 800125a:	4013      	ands	r3, r2
 800125c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4a52      	ldr	r2, [pc, #328]	; (80013ac <HAL_GPIO_Init+0x314>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d02b      	beq.n	80012be <HAL_GPIO_Init+0x226>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4a51      	ldr	r2, [pc, #324]	; (80013b0 <HAL_GPIO_Init+0x318>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d025      	beq.n	80012ba <HAL_GPIO_Init+0x222>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4a50      	ldr	r2, [pc, #320]	; (80013b4 <HAL_GPIO_Init+0x31c>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d01f      	beq.n	80012b6 <HAL_GPIO_Init+0x21e>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4a4f      	ldr	r2, [pc, #316]	; (80013b8 <HAL_GPIO_Init+0x320>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d019      	beq.n	80012b2 <HAL_GPIO_Init+0x21a>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4a4e      	ldr	r2, [pc, #312]	; (80013bc <HAL_GPIO_Init+0x324>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d013      	beq.n	80012ae <HAL_GPIO_Init+0x216>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4a4d      	ldr	r2, [pc, #308]	; (80013c0 <HAL_GPIO_Init+0x328>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d00d      	beq.n	80012aa <HAL_GPIO_Init+0x212>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	4a4c      	ldr	r2, [pc, #304]	; (80013c4 <HAL_GPIO_Init+0x32c>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d007      	beq.n	80012a6 <HAL_GPIO_Init+0x20e>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	4a4b      	ldr	r2, [pc, #300]	; (80013c8 <HAL_GPIO_Init+0x330>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d101      	bne.n	80012a2 <HAL_GPIO_Init+0x20a>
 800129e:	2307      	movs	r3, #7
 80012a0:	e00e      	b.n	80012c0 <HAL_GPIO_Init+0x228>
 80012a2:	2308      	movs	r3, #8
 80012a4:	e00c      	b.n	80012c0 <HAL_GPIO_Init+0x228>
 80012a6:	2306      	movs	r3, #6
 80012a8:	e00a      	b.n	80012c0 <HAL_GPIO_Init+0x228>
 80012aa:	2305      	movs	r3, #5
 80012ac:	e008      	b.n	80012c0 <HAL_GPIO_Init+0x228>
 80012ae:	2304      	movs	r3, #4
 80012b0:	e006      	b.n	80012c0 <HAL_GPIO_Init+0x228>
 80012b2:	2303      	movs	r3, #3
 80012b4:	e004      	b.n	80012c0 <HAL_GPIO_Init+0x228>
 80012b6:	2302      	movs	r3, #2
 80012b8:	e002      	b.n	80012c0 <HAL_GPIO_Init+0x228>
 80012ba:	2301      	movs	r3, #1
 80012bc:	e000      	b.n	80012c0 <HAL_GPIO_Init+0x228>
 80012be:	2300      	movs	r3, #0
 80012c0:	69fa      	ldr	r2, [r7, #28]
 80012c2:	f002 0203 	and.w	r2, r2, #3
 80012c6:	0092      	lsls	r2, r2, #2
 80012c8:	4093      	lsls	r3, r2
 80012ca:	69ba      	ldr	r2, [r7, #24]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012d0:	4935      	ldr	r1, [pc, #212]	; (80013a8 <HAL_GPIO_Init+0x310>)
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	089b      	lsrs	r3, r3, #2
 80012d6:	3302      	adds	r3, #2
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012de:	4b3b      	ldr	r3, [pc, #236]	; (80013cc <HAL_GPIO_Init+0x334>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	43db      	mvns	r3, r3
 80012e8:	69ba      	ldr	r2, [r7, #24]
 80012ea:	4013      	ands	r3, r2
 80012ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d003      	beq.n	8001302 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80012fa:	69ba      	ldr	r2, [r7, #24]
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	4313      	orrs	r3, r2
 8001300:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001302:	4a32      	ldr	r2, [pc, #200]	; (80013cc <HAL_GPIO_Init+0x334>)
 8001304:	69bb      	ldr	r3, [r7, #24]
 8001306:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001308:	4b30      	ldr	r3, [pc, #192]	; (80013cc <HAL_GPIO_Init+0x334>)
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	43db      	mvns	r3, r3
 8001312:	69ba      	ldr	r2, [r7, #24]
 8001314:	4013      	ands	r3, r2
 8001316:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001320:	2b00      	cmp	r3, #0
 8001322:	d003      	beq.n	800132c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001324:	69ba      	ldr	r2, [r7, #24]
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	4313      	orrs	r3, r2
 800132a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800132c:	4a27      	ldr	r2, [pc, #156]	; (80013cc <HAL_GPIO_Init+0x334>)
 800132e:	69bb      	ldr	r3, [r7, #24]
 8001330:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001332:	4b26      	ldr	r3, [pc, #152]	; (80013cc <HAL_GPIO_Init+0x334>)
 8001334:	689b      	ldr	r3, [r3, #8]
 8001336:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	43db      	mvns	r3, r3
 800133c:	69ba      	ldr	r2, [r7, #24]
 800133e:	4013      	ands	r3, r2
 8001340:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800134a:	2b00      	cmp	r3, #0
 800134c:	d003      	beq.n	8001356 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800134e:	69ba      	ldr	r2, [r7, #24]
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	4313      	orrs	r3, r2
 8001354:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001356:	4a1d      	ldr	r2, [pc, #116]	; (80013cc <HAL_GPIO_Init+0x334>)
 8001358:	69bb      	ldr	r3, [r7, #24]
 800135a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800135c:	4b1b      	ldr	r3, [pc, #108]	; (80013cc <HAL_GPIO_Init+0x334>)
 800135e:	68db      	ldr	r3, [r3, #12]
 8001360:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	43db      	mvns	r3, r3
 8001366:	69ba      	ldr	r2, [r7, #24]
 8001368:	4013      	ands	r3, r2
 800136a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001374:	2b00      	cmp	r3, #0
 8001376:	d003      	beq.n	8001380 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	4313      	orrs	r3, r2
 800137e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001380:	4a12      	ldr	r2, [pc, #72]	; (80013cc <HAL_GPIO_Init+0x334>)
 8001382:	69bb      	ldr	r3, [r7, #24]
 8001384:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	3301      	adds	r3, #1
 800138a:	61fb      	str	r3, [r7, #28]
 800138c:	69fb      	ldr	r3, [r7, #28]
 800138e:	2b0f      	cmp	r3, #15
 8001390:	f67f ae90 	bls.w	80010b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001394:	bf00      	nop
 8001396:	bf00      	nop
 8001398:	3724      	adds	r7, #36	; 0x24
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	40023800 	.word	0x40023800
 80013a8:	40013800 	.word	0x40013800
 80013ac:	40020000 	.word	0x40020000
 80013b0:	40020400 	.word	0x40020400
 80013b4:	40020800 	.word	0x40020800
 80013b8:	40020c00 	.word	0x40020c00
 80013bc:	40021000 	.word	0x40021000
 80013c0:	40021400 	.word	0x40021400
 80013c4:	40021800 	.word	0x40021800
 80013c8:	40021c00 	.word	0x40021c00
 80013cc:	40013c00 	.word	0x40013c00

080013d0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b085      	sub	sp, #20
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	460b      	mov	r3, r1
 80013da:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	691a      	ldr	r2, [r3, #16]
 80013e0:	887b      	ldrh	r3, [r7, #2]
 80013e2:	4013      	ands	r3, r2
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d002      	beq.n	80013ee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80013e8:	2301      	movs	r3, #1
 80013ea:	73fb      	strb	r3, [r7, #15]
 80013ec:	e001      	b.n	80013f2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80013ee:	2300      	movs	r3, #0
 80013f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80013f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	3714      	adds	r7, #20
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr

08001400 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	460b      	mov	r3, r1
 800140a:	807b      	strh	r3, [r7, #2]
 800140c:	4613      	mov	r3, r2
 800140e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001410:	787b      	ldrb	r3, [r7, #1]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d003      	beq.n	800141e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001416:	887a      	ldrh	r2, [r7, #2]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800141c:	e003      	b.n	8001426 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800141e:	887b      	ldrh	r3, [r7, #2]
 8001420:	041a      	lsls	r2, r3, #16
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	619a      	str	r2, [r3, #24]
}
 8001426:	bf00      	nop
 8001428:	370c      	adds	r7, #12
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr

08001432 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001432:	b480      	push	{r7}
 8001434:	b085      	sub	sp, #20
 8001436:	af00      	add	r7, sp, #0
 8001438:	6078      	str	r0, [r7, #4]
 800143a:	460b      	mov	r3, r1
 800143c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	695b      	ldr	r3, [r3, #20]
 8001442:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001444:	887a      	ldrh	r2, [r7, #2]
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	4013      	ands	r3, r2
 800144a:	041a      	lsls	r2, r3, #16
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	43d9      	mvns	r1, r3
 8001450:	887b      	ldrh	r3, [r7, #2]
 8001452:	400b      	ands	r3, r1
 8001454:	431a      	orrs	r2, r3
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	619a      	str	r2, [r3, #24]
}
 800145a:	bf00      	nop
 800145c:	3714      	adds	r7, #20
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
	...

08001468 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b086      	sub	sp, #24
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d101      	bne.n	800147a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001476:	2301      	movs	r3, #1
 8001478:	e264      	b.n	8001944 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f003 0301 	and.w	r3, r3, #1
 8001482:	2b00      	cmp	r3, #0
 8001484:	d075      	beq.n	8001572 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001486:	4ba3      	ldr	r3, [pc, #652]	; (8001714 <HAL_RCC_OscConfig+0x2ac>)
 8001488:	689b      	ldr	r3, [r3, #8]
 800148a:	f003 030c 	and.w	r3, r3, #12
 800148e:	2b04      	cmp	r3, #4
 8001490:	d00c      	beq.n	80014ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001492:	4ba0      	ldr	r3, [pc, #640]	; (8001714 <HAL_RCC_OscConfig+0x2ac>)
 8001494:	689b      	ldr	r3, [r3, #8]
 8001496:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800149a:	2b08      	cmp	r3, #8
 800149c:	d112      	bne.n	80014c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800149e:	4b9d      	ldr	r3, [pc, #628]	; (8001714 <HAL_RCC_OscConfig+0x2ac>)
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80014aa:	d10b      	bne.n	80014c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014ac:	4b99      	ldr	r3, [pc, #612]	; (8001714 <HAL_RCC_OscConfig+0x2ac>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d05b      	beq.n	8001570 <HAL_RCC_OscConfig+0x108>
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d157      	bne.n	8001570 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80014c0:	2301      	movs	r3, #1
 80014c2:	e23f      	b.n	8001944 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014cc:	d106      	bne.n	80014dc <HAL_RCC_OscConfig+0x74>
 80014ce:	4b91      	ldr	r3, [pc, #580]	; (8001714 <HAL_RCC_OscConfig+0x2ac>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4a90      	ldr	r2, [pc, #576]	; (8001714 <HAL_RCC_OscConfig+0x2ac>)
 80014d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014d8:	6013      	str	r3, [r2, #0]
 80014da:	e01d      	b.n	8001518 <HAL_RCC_OscConfig+0xb0>
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014e4:	d10c      	bne.n	8001500 <HAL_RCC_OscConfig+0x98>
 80014e6:	4b8b      	ldr	r3, [pc, #556]	; (8001714 <HAL_RCC_OscConfig+0x2ac>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a8a      	ldr	r2, [pc, #552]	; (8001714 <HAL_RCC_OscConfig+0x2ac>)
 80014ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014f0:	6013      	str	r3, [r2, #0]
 80014f2:	4b88      	ldr	r3, [pc, #544]	; (8001714 <HAL_RCC_OscConfig+0x2ac>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4a87      	ldr	r2, [pc, #540]	; (8001714 <HAL_RCC_OscConfig+0x2ac>)
 80014f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014fc:	6013      	str	r3, [r2, #0]
 80014fe:	e00b      	b.n	8001518 <HAL_RCC_OscConfig+0xb0>
 8001500:	4b84      	ldr	r3, [pc, #528]	; (8001714 <HAL_RCC_OscConfig+0x2ac>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a83      	ldr	r2, [pc, #524]	; (8001714 <HAL_RCC_OscConfig+0x2ac>)
 8001506:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800150a:	6013      	str	r3, [r2, #0]
 800150c:	4b81      	ldr	r3, [pc, #516]	; (8001714 <HAL_RCC_OscConfig+0x2ac>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a80      	ldr	r2, [pc, #512]	; (8001714 <HAL_RCC_OscConfig+0x2ac>)
 8001512:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001516:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d013      	beq.n	8001548 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001520:	f7ff fc78 	bl	8000e14 <HAL_GetTick>
 8001524:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001526:	e008      	b.n	800153a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001528:	f7ff fc74 	bl	8000e14 <HAL_GetTick>
 800152c:	4602      	mov	r2, r0
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	2b64      	cmp	r3, #100	; 0x64
 8001534:	d901      	bls.n	800153a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001536:	2303      	movs	r3, #3
 8001538:	e204      	b.n	8001944 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800153a:	4b76      	ldr	r3, [pc, #472]	; (8001714 <HAL_RCC_OscConfig+0x2ac>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001542:	2b00      	cmp	r3, #0
 8001544:	d0f0      	beq.n	8001528 <HAL_RCC_OscConfig+0xc0>
 8001546:	e014      	b.n	8001572 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001548:	f7ff fc64 	bl	8000e14 <HAL_GetTick>
 800154c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800154e:	e008      	b.n	8001562 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001550:	f7ff fc60 	bl	8000e14 <HAL_GetTick>
 8001554:	4602      	mov	r2, r0
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	1ad3      	subs	r3, r2, r3
 800155a:	2b64      	cmp	r3, #100	; 0x64
 800155c:	d901      	bls.n	8001562 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800155e:	2303      	movs	r3, #3
 8001560:	e1f0      	b.n	8001944 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001562:	4b6c      	ldr	r3, [pc, #432]	; (8001714 <HAL_RCC_OscConfig+0x2ac>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800156a:	2b00      	cmp	r3, #0
 800156c:	d1f0      	bne.n	8001550 <HAL_RCC_OscConfig+0xe8>
 800156e:	e000      	b.n	8001572 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001570:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f003 0302 	and.w	r3, r3, #2
 800157a:	2b00      	cmp	r3, #0
 800157c:	d063      	beq.n	8001646 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800157e:	4b65      	ldr	r3, [pc, #404]	; (8001714 <HAL_RCC_OscConfig+0x2ac>)
 8001580:	689b      	ldr	r3, [r3, #8]
 8001582:	f003 030c 	and.w	r3, r3, #12
 8001586:	2b00      	cmp	r3, #0
 8001588:	d00b      	beq.n	80015a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800158a:	4b62      	ldr	r3, [pc, #392]	; (8001714 <HAL_RCC_OscConfig+0x2ac>)
 800158c:	689b      	ldr	r3, [r3, #8]
 800158e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001592:	2b08      	cmp	r3, #8
 8001594:	d11c      	bne.n	80015d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001596:	4b5f      	ldr	r3, [pc, #380]	; (8001714 <HAL_RCC_OscConfig+0x2ac>)
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d116      	bne.n	80015d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015a2:	4b5c      	ldr	r3, [pc, #368]	; (8001714 <HAL_RCC_OscConfig+0x2ac>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f003 0302 	and.w	r3, r3, #2
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d005      	beq.n	80015ba <HAL_RCC_OscConfig+0x152>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	68db      	ldr	r3, [r3, #12]
 80015b2:	2b01      	cmp	r3, #1
 80015b4:	d001      	beq.n	80015ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	e1c4      	b.n	8001944 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015ba:	4b56      	ldr	r3, [pc, #344]	; (8001714 <HAL_RCC_OscConfig+0x2ac>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	691b      	ldr	r3, [r3, #16]
 80015c6:	00db      	lsls	r3, r3, #3
 80015c8:	4952      	ldr	r1, [pc, #328]	; (8001714 <HAL_RCC_OscConfig+0x2ac>)
 80015ca:	4313      	orrs	r3, r2
 80015cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015ce:	e03a      	b.n	8001646 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d020      	beq.n	800161a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015d8:	4b4f      	ldr	r3, [pc, #316]	; (8001718 <HAL_RCC_OscConfig+0x2b0>)
 80015da:	2201      	movs	r2, #1
 80015dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015de:	f7ff fc19 	bl	8000e14 <HAL_GetTick>
 80015e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015e4:	e008      	b.n	80015f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015e6:	f7ff fc15 	bl	8000e14 <HAL_GetTick>
 80015ea:	4602      	mov	r2, r0
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	1ad3      	subs	r3, r2, r3
 80015f0:	2b02      	cmp	r3, #2
 80015f2:	d901      	bls.n	80015f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80015f4:	2303      	movs	r3, #3
 80015f6:	e1a5      	b.n	8001944 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015f8:	4b46      	ldr	r3, [pc, #280]	; (8001714 <HAL_RCC_OscConfig+0x2ac>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f003 0302 	and.w	r3, r3, #2
 8001600:	2b00      	cmp	r3, #0
 8001602:	d0f0      	beq.n	80015e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001604:	4b43      	ldr	r3, [pc, #268]	; (8001714 <HAL_RCC_OscConfig+0x2ac>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	691b      	ldr	r3, [r3, #16]
 8001610:	00db      	lsls	r3, r3, #3
 8001612:	4940      	ldr	r1, [pc, #256]	; (8001714 <HAL_RCC_OscConfig+0x2ac>)
 8001614:	4313      	orrs	r3, r2
 8001616:	600b      	str	r3, [r1, #0]
 8001618:	e015      	b.n	8001646 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800161a:	4b3f      	ldr	r3, [pc, #252]	; (8001718 <HAL_RCC_OscConfig+0x2b0>)
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001620:	f7ff fbf8 	bl	8000e14 <HAL_GetTick>
 8001624:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001626:	e008      	b.n	800163a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001628:	f7ff fbf4 	bl	8000e14 <HAL_GetTick>
 800162c:	4602      	mov	r2, r0
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	2b02      	cmp	r3, #2
 8001634:	d901      	bls.n	800163a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001636:	2303      	movs	r3, #3
 8001638:	e184      	b.n	8001944 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800163a:	4b36      	ldr	r3, [pc, #216]	; (8001714 <HAL_RCC_OscConfig+0x2ac>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f003 0302 	and.w	r3, r3, #2
 8001642:	2b00      	cmp	r3, #0
 8001644:	d1f0      	bne.n	8001628 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f003 0308 	and.w	r3, r3, #8
 800164e:	2b00      	cmp	r3, #0
 8001650:	d030      	beq.n	80016b4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	695b      	ldr	r3, [r3, #20]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d016      	beq.n	8001688 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800165a:	4b30      	ldr	r3, [pc, #192]	; (800171c <HAL_RCC_OscConfig+0x2b4>)
 800165c:	2201      	movs	r2, #1
 800165e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001660:	f7ff fbd8 	bl	8000e14 <HAL_GetTick>
 8001664:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001666:	e008      	b.n	800167a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001668:	f7ff fbd4 	bl	8000e14 <HAL_GetTick>
 800166c:	4602      	mov	r2, r0
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	2b02      	cmp	r3, #2
 8001674:	d901      	bls.n	800167a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001676:	2303      	movs	r3, #3
 8001678:	e164      	b.n	8001944 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800167a:	4b26      	ldr	r3, [pc, #152]	; (8001714 <HAL_RCC_OscConfig+0x2ac>)
 800167c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800167e:	f003 0302 	and.w	r3, r3, #2
 8001682:	2b00      	cmp	r3, #0
 8001684:	d0f0      	beq.n	8001668 <HAL_RCC_OscConfig+0x200>
 8001686:	e015      	b.n	80016b4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001688:	4b24      	ldr	r3, [pc, #144]	; (800171c <HAL_RCC_OscConfig+0x2b4>)
 800168a:	2200      	movs	r2, #0
 800168c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800168e:	f7ff fbc1 	bl	8000e14 <HAL_GetTick>
 8001692:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001694:	e008      	b.n	80016a8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001696:	f7ff fbbd 	bl	8000e14 <HAL_GetTick>
 800169a:	4602      	mov	r2, r0
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	1ad3      	subs	r3, r2, r3
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	d901      	bls.n	80016a8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80016a4:	2303      	movs	r3, #3
 80016a6:	e14d      	b.n	8001944 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016a8:	4b1a      	ldr	r3, [pc, #104]	; (8001714 <HAL_RCC_OscConfig+0x2ac>)
 80016aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016ac:	f003 0302 	and.w	r3, r3, #2
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d1f0      	bne.n	8001696 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f003 0304 	and.w	r3, r3, #4
 80016bc:	2b00      	cmp	r3, #0
 80016be:	f000 80a0 	beq.w	8001802 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016c2:	2300      	movs	r3, #0
 80016c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016c6:	4b13      	ldr	r3, [pc, #76]	; (8001714 <HAL_RCC_OscConfig+0x2ac>)
 80016c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d10f      	bne.n	80016f2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016d2:	2300      	movs	r3, #0
 80016d4:	60bb      	str	r3, [r7, #8]
 80016d6:	4b0f      	ldr	r3, [pc, #60]	; (8001714 <HAL_RCC_OscConfig+0x2ac>)
 80016d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016da:	4a0e      	ldr	r2, [pc, #56]	; (8001714 <HAL_RCC_OscConfig+0x2ac>)
 80016dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016e0:	6413      	str	r3, [r2, #64]	; 0x40
 80016e2:	4b0c      	ldr	r3, [pc, #48]	; (8001714 <HAL_RCC_OscConfig+0x2ac>)
 80016e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ea:	60bb      	str	r3, [r7, #8]
 80016ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016ee:	2301      	movs	r3, #1
 80016f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016f2:	4b0b      	ldr	r3, [pc, #44]	; (8001720 <HAL_RCC_OscConfig+0x2b8>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d121      	bne.n	8001742 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016fe:	4b08      	ldr	r3, [pc, #32]	; (8001720 <HAL_RCC_OscConfig+0x2b8>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a07      	ldr	r2, [pc, #28]	; (8001720 <HAL_RCC_OscConfig+0x2b8>)
 8001704:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001708:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800170a:	f7ff fb83 	bl	8000e14 <HAL_GetTick>
 800170e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001710:	e011      	b.n	8001736 <HAL_RCC_OscConfig+0x2ce>
 8001712:	bf00      	nop
 8001714:	40023800 	.word	0x40023800
 8001718:	42470000 	.word	0x42470000
 800171c:	42470e80 	.word	0x42470e80
 8001720:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001724:	f7ff fb76 	bl	8000e14 <HAL_GetTick>
 8001728:	4602      	mov	r2, r0
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	2b02      	cmp	r3, #2
 8001730:	d901      	bls.n	8001736 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001732:	2303      	movs	r3, #3
 8001734:	e106      	b.n	8001944 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001736:	4b85      	ldr	r3, [pc, #532]	; (800194c <HAL_RCC_OscConfig+0x4e4>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800173e:	2b00      	cmp	r3, #0
 8001740:	d0f0      	beq.n	8001724 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	2b01      	cmp	r3, #1
 8001748:	d106      	bne.n	8001758 <HAL_RCC_OscConfig+0x2f0>
 800174a:	4b81      	ldr	r3, [pc, #516]	; (8001950 <HAL_RCC_OscConfig+0x4e8>)
 800174c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800174e:	4a80      	ldr	r2, [pc, #512]	; (8001950 <HAL_RCC_OscConfig+0x4e8>)
 8001750:	f043 0301 	orr.w	r3, r3, #1
 8001754:	6713      	str	r3, [r2, #112]	; 0x70
 8001756:	e01c      	b.n	8001792 <HAL_RCC_OscConfig+0x32a>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	2b05      	cmp	r3, #5
 800175e:	d10c      	bne.n	800177a <HAL_RCC_OscConfig+0x312>
 8001760:	4b7b      	ldr	r3, [pc, #492]	; (8001950 <HAL_RCC_OscConfig+0x4e8>)
 8001762:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001764:	4a7a      	ldr	r2, [pc, #488]	; (8001950 <HAL_RCC_OscConfig+0x4e8>)
 8001766:	f043 0304 	orr.w	r3, r3, #4
 800176a:	6713      	str	r3, [r2, #112]	; 0x70
 800176c:	4b78      	ldr	r3, [pc, #480]	; (8001950 <HAL_RCC_OscConfig+0x4e8>)
 800176e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001770:	4a77      	ldr	r2, [pc, #476]	; (8001950 <HAL_RCC_OscConfig+0x4e8>)
 8001772:	f043 0301 	orr.w	r3, r3, #1
 8001776:	6713      	str	r3, [r2, #112]	; 0x70
 8001778:	e00b      	b.n	8001792 <HAL_RCC_OscConfig+0x32a>
 800177a:	4b75      	ldr	r3, [pc, #468]	; (8001950 <HAL_RCC_OscConfig+0x4e8>)
 800177c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800177e:	4a74      	ldr	r2, [pc, #464]	; (8001950 <HAL_RCC_OscConfig+0x4e8>)
 8001780:	f023 0301 	bic.w	r3, r3, #1
 8001784:	6713      	str	r3, [r2, #112]	; 0x70
 8001786:	4b72      	ldr	r3, [pc, #456]	; (8001950 <HAL_RCC_OscConfig+0x4e8>)
 8001788:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800178a:	4a71      	ldr	r2, [pc, #452]	; (8001950 <HAL_RCC_OscConfig+0x4e8>)
 800178c:	f023 0304 	bic.w	r3, r3, #4
 8001790:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d015      	beq.n	80017c6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800179a:	f7ff fb3b 	bl	8000e14 <HAL_GetTick>
 800179e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017a0:	e00a      	b.n	80017b8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017a2:	f7ff fb37 	bl	8000e14 <HAL_GetTick>
 80017a6:	4602      	mov	r2, r0
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	1ad3      	subs	r3, r2, r3
 80017ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d901      	bls.n	80017b8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80017b4:	2303      	movs	r3, #3
 80017b6:	e0c5      	b.n	8001944 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017b8:	4b65      	ldr	r3, [pc, #404]	; (8001950 <HAL_RCC_OscConfig+0x4e8>)
 80017ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017bc:	f003 0302 	and.w	r3, r3, #2
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d0ee      	beq.n	80017a2 <HAL_RCC_OscConfig+0x33a>
 80017c4:	e014      	b.n	80017f0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017c6:	f7ff fb25 	bl	8000e14 <HAL_GetTick>
 80017ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017cc:	e00a      	b.n	80017e4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017ce:	f7ff fb21 	bl	8000e14 <HAL_GetTick>
 80017d2:	4602      	mov	r2, r0
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	1ad3      	subs	r3, r2, r3
 80017d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80017dc:	4293      	cmp	r3, r2
 80017de:	d901      	bls.n	80017e4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80017e0:	2303      	movs	r3, #3
 80017e2:	e0af      	b.n	8001944 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017e4:	4b5a      	ldr	r3, [pc, #360]	; (8001950 <HAL_RCC_OscConfig+0x4e8>)
 80017e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017e8:	f003 0302 	and.w	r3, r3, #2
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d1ee      	bne.n	80017ce <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80017f0:	7dfb      	ldrb	r3, [r7, #23]
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d105      	bne.n	8001802 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017f6:	4b56      	ldr	r3, [pc, #344]	; (8001950 <HAL_RCC_OscConfig+0x4e8>)
 80017f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fa:	4a55      	ldr	r2, [pc, #340]	; (8001950 <HAL_RCC_OscConfig+0x4e8>)
 80017fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001800:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	699b      	ldr	r3, [r3, #24]
 8001806:	2b00      	cmp	r3, #0
 8001808:	f000 809b 	beq.w	8001942 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800180c:	4b50      	ldr	r3, [pc, #320]	; (8001950 <HAL_RCC_OscConfig+0x4e8>)
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	f003 030c 	and.w	r3, r3, #12
 8001814:	2b08      	cmp	r3, #8
 8001816:	d05c      	beq.n	80018d2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	699b      	ldr	r3, [r3, #24]
 800181c:	2b02      	cmp	r3, #2
 800181e:	d141      	bne.n	80018a4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001820:	4b4c      	ldr	r3, [pc, #304]	; (8001954 <HAL_RCC_OscConfig+0x4ec>)
 8001822:	2200      	movs	r2, #0
 8001824:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001826:	f7ff faf5 	bl	8000e14 <HAL_GetTick>
 800182a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800182c:	e008      	b.n	8001840 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800182e:	f7ff faf1 	bl	8000e14 <HAL_GetTick>
 8001832:	4602      	mov	r2, r0
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	1ad3      	subs	r3, r2, r3
 8001838:	2b02      	cmp	r3, #2
 800183a:	d901      	bls.n	8001840 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800183c:	2303      	movs	r3, #3
 800183e:	e081      	b.n	8001944 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001840:	4b43      	ldr	r3, [pc, #268]	; (8001950 <HAL_RCC_OscConfig+0x4e8>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001848:	2b00      	cmp	r3, #0
 800184a:	d1f0      	bne.n	800182e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	69da      	ldr	r2, [r3, #28]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6a1b      	ldr	r3, [r3, #32]
 8001854:	431a      	orrs	r2, r3
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800185a:	019b      	lsls	r3, r3, #6
 800185c:	431a      	orrs	r2, r3
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001862:	085b      	lsrs	r3, r3, #1
 8001864:	3b01      	subs	r3, #1
 8001866:	041b      	lsls	r3, r3, #16
 8001868:	431a      	orrs	r2, r3
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800186e:	061b      	lsls	r3, r3, #24
 8001870:	4937      	ldr	r1, [pc, #220]	; (8001950 <HAL_RCC_OscConfig+0x4e8>)
 8001872:	4313      	orrs	r3, r2
 8001874:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001876:	4b37      	ldr	r3, [pc, #220]	; (8001954 <HAL_RCC_OscConfig+0x4ec>)
 8001878:	2201      	movs	r2, #1
 800187a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800187c:	f7ff faca 	bl	8000e14 <HAL_GetTick>
 8001880:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001882:	e008      	b.n	8001896 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001884:	f7ff fac6 	bl	8000e14 <HAL_GetTick>
 8001888:	4602      	mov	r2, r0
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	2b02      	cmp	r3, #2
 8001890:	d901      	bls.n	8001896 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001892:	2303      	movs	r3, #3
 8001894:	e056      	b.n	8001944 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001896:	4b2e      	ldr	r3, [pc, #184]	; (8001950 <HAL_RCC_OscConfig+0x4e8>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d0f0      	beq.n	8001884 <HAL_RCC_OscConfig+0x41c>
 80018a2:	e04e      	b.n	8001942 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018a4:	4b2b      	ldr	r3, [pc, #172]	; (8001954 <HAL_RCC_OscConfig+0x4ec>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018aa:	f7ff fab3 	bl	8000e14 <HAL_GetTick>
 80018ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018b0:	e008      	b.n	80018c4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018b2:	f7ff faaf 	bl	8000e14 <HAL_GetTick>
 80018b6:	4602      	mov	r2, r0
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	1ad3      	subs	r3, r2, r3
 80018bc:	2b02      	cmp	r3, #2
 80018be:	d901      	bls.n	80018c4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80018c0:	2303      	movs	r3, #3
 80018c2:	e03f      	b.n	8001944 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018c4:	4b22      	ldr	r3, [pc, #136]	; (8001950 <HAL_RCC_OscConfig+0x4e8>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d1f0      	bne.n	80018b2 <HAL_RCC_OscConfig+0x44a>
 80018d0:	e037      	b.n	8001942 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	699b      	ldr	r3, [r3, #24]
 80018d6:	2b01      	cmp	r3, #1
 80018d8:	d101      	bne.n	80018de <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	e032      	b.n	8001944 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80018de:	4b1c      	ldr	r3, [pc, #112]	; (8001950 <HAL_RCC_OscConfig+0x4e8>)
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	699b      	ldr	r3, [r3, #24]
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d028      	beq.n	800193e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018f6:	429a      	cmp	r2, r3
 80018f8:	d121      	bne.n	800193e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001904:	429a      	cmp	r2, r3
 8001906:	d11a      	bne.n	800193e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001908:	68fa      	ldr	r2, [r7, #12]
 800190a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800190e:	4013      	ands	r3, r2
 8001910:	687a      	ldr	r2, [r7, #4]
 8001912:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001914:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001916:	4293      	cmp	r3, r2
 8001918:	d111      	bne.n	800193e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001924:	085b      	lsrs	r3, r3, #1
 8001926:	3b01      	subs	r3, #1
 8001928:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800192a:	429a      	cmp	r2, r3
 800192c:	d107      	bne.n	800193e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001938:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800193a:	429a      	cmp	r2, r3
 800193c:	d001      	beq.n	8001942 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	e000      	b.n	8001944 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001942:	2300      	movs	r3, #0
}
 8001944:	4618      	mov	r0, r3
 8001946:	3718      	adds	r7, #24
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	40007000 	.word	0x40007000
 8001950:	40023800 	.word	0x40023800
 8001954:	42470060 	.word	0x42470060

08001958 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b084      	sub	sp, #16
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d101      	bne.n	800196c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001968:	2301      	movs	r3, #1
 800196a:	e0cc      	b.n	8001b06 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800196c:	4b68      	ldr	r3, [pc, #416]	; (8001b10 <HAL_RCC_ClockConfig+0x1b8>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 0307 	and.w	r3, r3, #7
 8001974:	683a      	ldr	r2, [r7, #0]
 8001976:	429a      	cmp	r2, r3
 8001978:	d90c      	bls.n	8001994 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800197a:	4b65      	ldr	r3, [pc, #404]	; (8001b10 <HAL_RCC_ClockConfig+0x1b8>)
 800197c:	683a      	ldr	r2, [r7, #0]
 800197e:	b2d2      	uxtb	r2, r2
 8001980:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001982:	4b63      	ldr	r3, [pc, #396]	; (8001b10 <HAL_RCC_ClockConfig+0x1b8>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 0307 	and.w	r3, r3, #7
 800198a:	683a      	ldr	r2, [r7, #0]
 800198c:	429a      	cmp	r2, r3
 800198e:	d001      	beq.n	8001994 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	e0b8      	b.n	8001b06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f003 0302 	and.w	r3, r3, #2
 800199c:	2b00      	cmp	r3, #0
 800199e:	d020      	beq.n	80019e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f003 0304 	and.w	r3, r3, #4
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d005      	beq.n	80019b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019ac:	4b59      	ldr	r3, [pc, #356]	; (8001b14 <HAL_RCC_ClockConfig+0x1bc>)
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	4a58      	ldr	r2, [pc, #352]	; (8001b14 <HAL_RCC_ClockConfig+0x1bc>)
 80019b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80019b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 0308 	and.w	r3, r3, #8
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d005      	beq.n	80019d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019c4:	4b53      	ldr	r3, [pc, #332]	; (8001b14 <HAL_RCC_ClockConfig+0x1bc>)
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	4a52      	ldr	r2, [pc, #328]	; (8001b14 <HAL_RCC_ClockConfig+0x1bc>)
 80019ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80019ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019d0:	4b50      	ldr	r3, [pc, #320]	; (8001b14 <HAL_RCC_ClockConfig+0x1bc>)
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	494d      	ldr	r1, [pc, #308]	; (8001b14 <HAL_RCC_ClockConfig+0x1bc>)
 80019de:	4313      	orrs	r3, r2
 80019e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 0301 	and.w	r3, r3, #1
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d044      	beq.n	8001a78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d107      	bne.n	8001a06 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019f6:	4b47      	ldr	r3, [pc, #284]	; (8001b14 <HAL_RCC_ClockConfig+0x1bc>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d119      	bne.n	8001a36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e07f      	b.n	8001b06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	2b02      	cmp	r3, #2
 8001a0c:	d003      	beq.n	8001a16 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a12:	2b03      	cmp	r3, #3
 8001a14:	d107      	bne.n	8001a26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a16:	4b3f      	ldr	r3, [pc, #252]	; (8001b14 <HAL_RCC_ClockConfig+0x1bc>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d109      	bne.n	8001a36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e06f      	b.n	8001b06 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a26:	4b3b      	ldr	r3, [pc, #236]	; (8001b14 <HAL_RCC_ClockConfig+0x1bc>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 0302 	and.w	r3, r3, #2
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d101      	bne.n	8001a36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e067      	b.n	8001b06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a36:	4b37      	ldr	r3, [pc, #220]	; (8001b14 <HAL_RCC_ClockConfig+0x1bc>)
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	f023 0203 	bic.w	r2, r3, #3
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	4934      	ldr	r1, [pc, #208]	; (8001b14 <HAL_RCC_ClockConfig+0x1bc>)
 8001a44:	4313      	orrs	r3, r2
 8001a46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a48:	f7ff f9e4 	bl	8000e14 <HAL_GetTick>
 8001a4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a4e:	e00a      	b.n	8001a66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a50:	f7ff f9e0 	bl	8000e14 <HAL_GetTick>
 8001a54:	4602      	mov	r2, r0
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d901      	bls.n	8001a66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a62:	2303      	movs	r3, #3
 8001a64:	e04f      	b.n	8001b06 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a66:	4b2b      	ldr	r3, [pc, #172]	; (8001b14 <HAL_RCC_ClockConfig+0x1bc>)
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	f003 020c 	and.w	r2, r3, #12
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	009b      	lsls	r3, r3, #2
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d1eb      	bne.n	8001a50 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a78:	4b25      	ldr	r3, [pc, #148]	; (8001b10 <HAL_RCC_ClockConfig+0x1b8>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 0307 	and.w	r3, r3, #7
 8001a80:	683a      	ldr	r2, [r7, #0]
 8001a82:	429a      	cmp	r2, r3
 8001a84:	d20c      	bcs.n	8001aa0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a86:	4b22      	ldr	r3, [pc, #136]	; (8001b10 <HAL_RCC_ClockConfig+0x1b8>)
 8001a88:	683a      	ldr	r2, [r7, #0]
 8001a8a:	b2d2      	uxtb	r2, r2
 8001a8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a8e:	4b20      	ldr	r3, [pc, #128]	; (8001b10 <HAL_RCC_ClockConfig+0x1b8>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f003 0307 	and.w	r3, r3, #7
 8001a96:	683a      	ldr	r2, [r7, #0]
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d001      	beq.n	8001aa0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e032      	b.n	8001b06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f003 0304 	and.w	r3, r3, #4
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d008      	beq.n	8001abe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001aac:	4b19      	ldr	r3, [pc, #100]	; (8001b14 <HAL_RCC_ClockConfig+0x1bc>)
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	4916      	ldr	r1, [pc, #88]	; (8001b14 <HAL_RCC_ClockConfig+0x1bc>)
 8001aba:	4313      	orrs	r3, r2
 8001abc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f003 0308 	and.w	r3, r3, #8
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d009      	beq.n	8001ade <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001aca:	4b12      	ldr	r3, [pc, #72]	; (8001b14 <HAL_RCC_ClockConfig+0x1bc>)
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	691b      	ldr	r3, [r3, #16]
 8001ad6:	00db      	lsls	r3, r3, #3
 8001ad8:	490e      	ldr	r1, [pc, #56]	; (8001b14 <HAL_RCC_ClockConfig+0x1bc>)
 8001ada:	4313      	orrs	r3, r2
 8001adc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001ade:	f000 f821 	bl	8001b24 <HAL_RCC_GetSysClockFreq>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	4b0b      	ldr	r3, [pc, #44]	; (8001b14 <HAL_RCC_ClockConfig+0x1bc>)
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	091b      	lsrs	r3, r3, #4
 8001aea:	f003 030f 	and.w	r3, r3, #15
 8001aee:	490a      	ldr	r1, [pc, #40]	; (8001b18 <HAL_RCC_ClockConfig+0x1c0>)
 8001af0:	5ccb      	ldrb	r3, [r1, r3]
 8001af2:	fa22 f303 	lsr.w	r3, r2, r3
 8001af6:	4a09      	ldr	r2, [pc, #36]	; (8001b1c <HAL_RCC_ClockConfig+0x1c4>)
 8001af8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001afa:	4b09      	ldr	r3, [pc, #36]	; (8001b20 <HAL_RCC_ClockConfig+0x1c8>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4618      	mov	r0, r3
 8001b00:	f7ff f944 	bl	8000d8c <HAL_InitTick>

  return HAL_OK;
 8001b04:	2300      	movs	r3, #0
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	3710      	adds	r7, #16
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	40023c00 	.word	0x40023c00
 8001b14:	40023800 	.word	0x40023800
 8001b18:	08002594 	.word	0x08002594
 8001b1c:	20000000 	.word	0x20000000
 8001b20:	20000004 	.word	0x20000004

08001b24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b24:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001b28:	b084      	sub	sp, #16
 8001b2a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	607b      	str	r3, [r7, #4]
 8001b30:	2300      	movs	r3, #0
 8001b32:	60fb      	str	r3, [r7, #12]
 8001b34:	2300      	movs	r3, #0
 8001b36:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b3c:	4b67      	ldr	r3, [pc, #412]	; (8001cdc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	f003 030c 	and.w	r3, r3, #12
 8001b44:	2b08      	cmp	r3, #8
 8001b46:	d00d      	beq.n	8001b64 <HAL_RCC_GetSysClockFreq+0x40>
 8001b48:	2b08      	cmp	r3, #8
 8001b4a:	f200 80bd 	bhi.w	8001cc8 <HAL_RCC_GetSysClockFreq+0x1a4>
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d002      	beq.n	8001b58 <HAL_RCC_GetSysClockFreq+0x34>
 8001b52:	2b04      	cmp	r3, #4
 8001b54:	d003      	beq.n	8001b5e <HAL_RCC_GetSysClockFreq+0x3a>
 8001b56:	e0b7      	b.n	8001cc8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b58:	4b61      	ldr	r3, [pc, #388]	; (8001ce0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001b5a:	60bb      	str	r3, [r7, #8]
       break;
 8001b5c:	e0b7      	b.n	8001cce <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b5e:	4b61      	ldr	r3, [pc, #388]	; (8001ce4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001b60:	60bb      	str	r3, [r7, #8]
      break;
 8001b62:	e0b4      	b.n	8001cce <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b64:	4b5d      	ldr	r3, [pc, #372]	; (8001cdc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b6c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b6e:	4b5b      	ldr	r3, [pc, #364]	; (8001cdc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d04d      	beq.n	8001c16 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b7a:	4b58      	ldr	r3, [pc, #352]	; (8001cdc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	099b      	lsrs	r3, r3, #6
 8001b80:	461a      	mov	r2, r3
 8001b82:	f04f 0300 	mov.w	r3, #0
 8001b86:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001b8a:	f04f 0100 	mov.w	r1, #0
 8001b8e:	ea02 0800 	and.w	r8, r2, r0
 8001b92:	ea03 0901 	and.w	r9, r3, r1
 8001b96:	4640      	mov	r0, r8
 8001b98:	4649      	mov	r1, r9
 8001b9a:	f04f 0200 	mov.w	r2, #0
 8001b9e:	f04f 0300 	mov.w	r3, #0
 8001ba2:	014b      	lsls	r3, r1, #5
 8001ba4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001ba8:	0142      	lsls	r2, r0, #5
 8001baa:	4610      	mov	r0, r2
 8001bac:	4619      	mov	r1, r3
 8001bae:	ebb0 0008 	subs.w	r0, r0, r8
 8001bb2:	eb61 0109 	sbc.w	r1, r1, r9
 8001bb6:	f04f 0200 	mov.w	r2, #0
 8001bba:	f04f 0300 	mov.w	r3, #0
 8001bbe:	018b      	lsls	r3, r1, #6
 8001bc0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001bc4:	0182      	lsls	r2, r0, #6
 8001bc6:	1a12      	subs	r2, r2, r0
 8001bc8:	eb63 0301 	sbc.w	r3, r3, r1
 8001bcc:	f04f 0000 	mov.w	r0, #0
 8001bd0:	f04f 0100 	mov.w	r1, #0
 8001bd4:	00d9      	lsls	r1, r3, #3
 8001bd6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001bda:	00d0      	lsls	r0, r2, #3
 8001bdc:	4602      	mov	r2, r0
 8001bde:	460b      	mov	r3, r1
 8001be0:	eb12 0208 	adds.w	r2, r2, r8
 8001be4:	eb43 0309 	adc.w	r3, r3, r9
 8001be8:	f04f 0000 	mov.w	r0, #0
 8001bec:	f04f 0100 	mov.w	r1, #0
 8001bf0:	0259      	lsls	r1, r3, #9
 8001bf2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001bf6:	0250      	lsls	r0, r2, #9
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	460b      	mov	r3, r1
 8001bfc:	4610      	mov	r0, r2
 8001bfe:	4619      	mov	r1, r3
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	461a      	mov	r2, r3
 8001c04:	f04f 0300 	mov.w	r3, #0
 8001c08:	f7fe fade 	bl	80001c8 <__aeabi_uldivmod>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	460b      	mov	r3, r1
 8001c10:	4613      	mov	r3, r2
 8001c12:	60fb      	str	r3, [r7, #12]
 8001c14:	e04a      	b.n	8001cac <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c16:	4b31      	ldr	r3, [pc, #196]	; (8001cdc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	099b      	lsrs	r3, r3, #6
 8001c1c:	461a      	mov	r2, r3
 8001c1e:	f04f 0300 	mov.w	r3, #0
 8001c22:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001c26:	f04f 0100 	mov.w	r1, #0
 8001c2a:	ea02 0400 	and.w	r4, r2, r0
 8001c2e:	ea03 0501 	and.w	r5, r3, r1
 8001c32:	4620      	mov	r0, r4
 8001c34:	4629      	mov	r1, r5
 8001c36:	f04f 0200 	mov.w	r2, #0
 8001c3a:	f04f 0300 	mov.w	r3, #0
 8001c3e:	014b      	lsls	r3, r1, #5
 8001c40:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001c44:	0142      	lsls	r2, r0, #5
 8001c46:	4610      	mov	r0, r2
 8001c48:	4619      	mov	r1, r3
 8001c4a:	1b00      	subs	r0, r0, r4
 8001c4c:	eb61 0105 	sbc.w	r1, r1, r5
 8001c50:	f04f 0200 	mov.w	r2, #0
 8001c54:	f04f 0300 	mov.w	r3, #0
 8001c58:	018b      	lsls	r3, r1, #6
 8001c5a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001c5e:	0182      	lsls	r2, r0, #6
 8001c60:	1a12      	subs	r2, r2, r0
 8001c62:	eb63 0301 	sbc.w	r3, r3, r1
 8001c66:	f04f 0000 	mov.w	r0, #0
 8001c6a:	f04f 0100 	mov.w	r1, #0
 8001c6e:	00d9      	lsls	r1, r3, #3
 8001c70:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001c74:	00d0      	lsls	r0, r2, #3
 8001c76:	4602      	mov	r2, r0
 8001c78:	460b      	mov	r3, r1
 8001c7a:	1912      	adds	r2, r2, r4
 8001c7c:	eb45 0303 	adc.w	r3, r5, r3
 8001c80:	f04f 0000 	mov.w	r0, #0
 8001c84:	f04f 0100 	mov.w	r1, #0
 8001c88:	0299      	lsls	r1, r3, #10
 8001c8a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001c8e:	0290      	lsls	r0, r2, #10
 8001c90:	4602      	mov	r2, r0
 8001c92:	460b      	mov	r3, r1
 8001c94:	4610      	mov	r0, r2
 8001c96:	4619      	mov	r1, r3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	f04f 0300 	mov.w	r3, #0
 8001ca0:	f7fe fa92 	bl	80001c8 <__aeabi_uldivmod>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	460b      	mov	r3, r1
 8001ca8:	4613      	mov	r3, r2
 8001caa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001cac:	4b0b      	ldr	r3, [pc, #44]	; (8001cdc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	0c1b      	lsrs	r3, r3, #16
 8001cb2:	f003 0303 	and.w	r3, r3, #3
 8001cb6:	3301      	adds	r3, #1
 8001cb8:	005b      	lsls	r3, r3, #1
 8001cba:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001cbc:	68fa      	ldr	r2, [r7, #12]
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cc4:	60bb      	str	r3, [r7, #8]
      break;
 8001cc6:	e002      	b.n	8001cce <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001cc8:	4b05      	ldr	r3, [pc, #20]	; (8001ce0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001cca:	60bb      	str	r3, [r7, #8]
      break;
 8001ccc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cce:	68bb      	ldr	r3, [r7, #8]
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3710      	adds	r7, #16
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001cda:	bf00      	nop
 8001cdc:	40023800 	.word	0x40023800
 8001ce0:	00f42400 	.word	0x00f42400
 8001ce4:	007a1200 	.word	0x007a1200

08001ce8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cec:	4b03      	ldr	r3, [pc, #12]	; (8001cfc <HAL_RCC_GetHCLKFreq+0x14>)
 8001cee:	681b      	ldr	r3, [r3, #0]
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr
 8001cfa:	bf00      	nop
 8001cfc:	20000000 	.word	0x20000000

08001d00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001d04:	f7ff fff0 	bl	8001ce8 <HAL_RCC_GetHCLKFreq>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	4b05      	ldr	r3, [pc, #20]	; (8001d20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	0a9b      	lsrs	r3, r3, #10
 8001d10:	f003 0307 	and.w	r3, r3, #7
 8001d14:	4903      	ldr	r1, [pc, #12]	; (8001d24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d16:	5ccb      	ldrb	r3, [r1, r3]
 8001d18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	40023800 	.word	0x40023800
 8001d24:	080025a4 	.word	0x080025a4

08001d28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001d2c:	f7ff ffdc 	bl	8001ce8 <HAL_RCC_GetHCLKFreq>
 8001d30:	4602      	mov	r2, r0
 8001d32:	4b05      	ldr	r3, [pc, #20]	; (8001d48 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	0b5b      	lsrs	r3, r3, #13
 8001d38:	f003 0307 	and.w	r3, r3, #7
 8001d3c:	4903      	ldr	r1, [pc, #12]	; (8001d4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d3e:	5ccb      	ldrb	r3, [r1, r3]
 8001d40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	40023800 	.word	0x40023800
 8001d4c:	080025a4 	.word	0x080025a4

08001d50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d101      	bne.n	8001d62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e041      	b.n	8001de6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d106      	bne.n	8001d7c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2200      	movs	r2, #0
 8001d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	f7fe ff00 	bl	8000b7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2202      	movs	r2, #2
 8001d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	3304      	adds	r3, #4
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	4610      	mov	r0, r2
 8001d90:	f000 f896 	bl	8001ec0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2201      	movs	r2, #1
 8001d98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2201      	movs	r2, #1
 8001da0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2201      	movs	r2, #1
 8001da8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2201      	movs	r2, #1
 8001db0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2201      	movs	r2, #1
 8001db8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2201      	movs	r2, #1
 8001dd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2201      	movs	r2, #1
 8001de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001de4:	2300      	movs	r3, #0
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3708      	adds	r7, #8
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
	...

08001df0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b085      	sub	sp, #20
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d001      	beq.n	8001e08 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001e04:	2301      	movs	r3, #1
 8001e06:	e046      	b.n	8001e96 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2202      	movs	r2, #2
 8001e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a23      	ldr	r2, [pc, #140]	; (8001ea4 <HAL_TIM_Base_Start+0xb4>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d022      	beq.n	8001e60 <HAL_TIM_Base_Start+0x70>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e22:	d01d      	beq.n	8001e60 <HAL_TIM_Base_Start+0x70>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a1f      	ldr	r2, [pc, #124]	; (8001ea8 <HAL_TIM_Base_Start+0xb8>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d018      	beq.n	8001e60 <HAL_TIM_Base_Start+0x70>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a1e      	ldr	r2, [pc, #120]	; (8001eac <HAL_TIM_Base_Start+0xbc>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d013      	beq.n	8001e60 <HAL_TIM_Base_Start+0x70>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a1c      	ldr	r2, [pc, #112]	; (8001eb0 <HAL_TIM_Base_Start+0xc0>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d00e      	beq.n	8001e60 <HAL_TIM_Base_Start+0x70>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a1b      	ldr	r2, [pc, #108]	; (8001eb4 <HAL_TIM_Base_Start+0xc4>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d009      	beq.n	8001e60 <HAL_TIM_Base_Start+0x70>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a19      	ldr	r2, [pc, #100]	; (8001eb8 <HAL_TIM_Base_Start+0xc8>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d004      	beq.n	8001e60 <HAL_TIM_Base_Start+0x70>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a18      	ldr	r2, [pc, #96]	; (8001ebc <HAL_TIM_Base_Start+0xcc>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d111      	bne.n	8001e84 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	f003 0307 	and.w	r3, r3, #7
 8001e6a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	2b06      	cmp	r3, #6
 8001e70:	d010      	beq.n	8001e94 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f042 0201 	orr.w	r2, r2, #1
 8001e80:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e82:	e007      	b.n	8001e94 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f042 0201 	orr.w	r2, r2, #1
 8001e92:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e94:	2300      	movs	r3, #0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3714      	adds	r7, #20
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	40010000 	.word	0x40010000
 8001ea8:	40000400 	.word	0x40000400
 8001eac:	40000800 	.word	0x40000800
 8001eb0:	40000c00 	.word	0x40000c00
 8001eb4:	40010400 	.word	0x40010400
 8001eb8:	40014000 	.word	0x40014000
 8001ebc:	40001800 	.word	0x40001800

08001ec0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b085      	sub	sp, #20
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	4a40      	ldr	r2, [pc, #256]	; (8001fd4 <TIM_Base_SetConfig+0x114>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d013      	beq.n	8001f00 <TIM_Base_SetConfig+0x40>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ede:	d00f      	beq.n	8001f00 <TIM_Base_SetConfig+0x40>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	4a3d      	ldr	r2, [pc, #244]	; (8001fd8 <TIM_Base_SetConfig+0x118>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d00b      	beq.n	8001f00 <TIM_Base_SetConfig+0x40>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	4a3c      	ldr	r2, [pc, #240]	; (8001fdc <TIM_Base_SetConfig+0x11c>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d007      	beq.n	8001f00 <TIM_Base_SetConfig+0x40>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	4a3b      	ldr	r2, [pc, #236]	; (8001fe0 <TIM_Base_SetConfig+0x120>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d003      	beq.n	8001f00 <TIM_Base_SetConfig+0x40>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	4a3a      	ldr	r2, [pc, #232]	; (8001fe4 <TIM_Base_SetConfig+0x124>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d108      	bne.n	8001f12 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	68fa      	ldr	r2, [r7, #12]
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4a2f      	ldr	r2, [pc, #188]	; (8001fd4 <TIM_Base_SetConfig+0x114>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d02b      	beq.n	8001f72 <TIM_Base_SetConfig+0xb2>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f20:	d027      	beq.n	8001f72 <TIM_Base_SetConfig+0xb2>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4a2c      	ldr	r2, [pc, #176]	; (8001fd8 <TIM_Base_SetConfig+0x118>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d023      	beq.n	8001f72 <TIM_Base_SetConfig+0xb2>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4a2b      	ldr	r2, [pc, #172]	; (8001fdc <TIM_Base_SetConfig+0x11c>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d01f      	beq.n	8001f72 <TIM_Base_SetConfig+0xb2>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4a2a      	ldr	r2, [pc, #168]	; (8001fe0 <TIM_Base_SetConfig+0x120>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d01b      	beq.n	8001f72 <TIM_Base_SetConfig+0xb2>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4a29      	ldr	r2, [pc, #164]	; (8001fe4 <TIM_Base_SetConfig+0x124>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d017      	beq.n	8001f72 <TIM_Base_SetConfig+0xb2>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4a28      	ldr	r2, [pc, #160]	; (8001fe8 <TIM_Base_SetConfig+0x128>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d013      	beq.n	8001f72 <TIM_Base_SetConfig+0xb2>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4a27      	ldr	r2, [pc, #156]	; (8001fec <TIM_Base_SetConfig+0x12c>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d00f      	beq.n	8001f72 <TIM_Base_SetConfig+0xb2>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4a26      	ldr	r2, [pc, #152]	; (8001ff0 <TIM_Base_SetConfig+0x130>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d00b      	beq.n	8001f72 <TIM_Base_SetConfig+0xb2>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	4a25      	ldr	r2, [pc, #148]	; (8001ff4 <TIM_Base_SetConfig+0x134>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d007      	beq.n	8001f72 <TIM_Base_SetConfig+0xb2>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4a24      	ldr	r2, [pc, #144]	; (8001ff8 <TIM_Base_SetConfig+0x138>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d003      	beq.n	8001f72 <TIM_Base_SetConfig+0xb2>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	4a23      	ldr	r2, [pc, #140]	; (8001ffc <TIM_Base_SetConfig+0x13c>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d108      	bne.n	8001f84 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	68db      	ldr	r3, [r3, #12]
 8001f7e:	68fa      	ldr	r2, [r7, #12]
 8001f80:	4313      	orrs	r3, r2
 8001f82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	695b      	ldr	r3, [r3, #20]
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	68fa      	ldr	r2, [r7, #12]
 8001f96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	689a      	ldr	r2, [r3, #8]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	4a0a      	ldr	r2, [pc, #40]	; (8001fd4 <TIM_Base_SetConfig+0x114>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d003      	beq.n	8001fb8 <TIM_Base_SetConfig+0xf8>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	4a0c      	ldr	r2, [pc, #48]	; (8001fe4 <TIM_Base_SetConfig+0x124>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d103      	bne.n	8001fc0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	691a      	ldr	r2, [r3, #16]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	615a      	str	r2, [r3, #20]
}
 8001fc6:	bf00      	nop
 8001fc8:	3714      	adds	r7, #20
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop
 8001fd4:	40010000 	.word	0x40010000
 8001fd8:	40000400 	.word	0x40000400
 8001fdc:	40000800 	.word	0x40000800
 8001fe0:	40000c00 	.word	0x40000c00
 8001fe4:	40010400 	.word	0x40010400
 8001fe8:	40014000 	.word	0x40014000
 8001fec:	40014400 	.word	0x40014400
 8001ff0:	40014800 	.word	0x40014800
 8001ff4:	40001800 	.word	0x40001800
 8001ff8:	40001c00 	.word	0x40001c00
 8001ffc:	40002000 	.word	0x40002000

08002000 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002000:	b480      	push	{r7}
 8002002:	b085      	sub	sp, #20
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002010:	2b01      	cmp	r3, #1
 8002012:	d101      	bne.n	8002018 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002014:	2302      	movs	r3, #2
 8002016:	e05a      	b.n	80020ce <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2201      	movs	r2, #1
 800201c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2202      	movs	r2, #2
 8002024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800203e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	68fa      	ldr	r2, [r7, #12]
 8002046:	4313      	orrs	r3, r2
 8002048:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	68fa      	ldr	r2, [r7, #12]
 8002050:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a21      	ldr	r2, [pc, #132]	; (80020dc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d022      	beq.n	80020a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002064:	d01d      	beq.n	80020a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a1d      	ldr	r2, [pc, #116]	; (80020e0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d018      	beq.n	80020a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a1b      	ldr	r2, [pc, #108]	; (80020e4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d013      	beq.n	80020a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a1a      	ldr	r2, [pc, #104]	; (80020e8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d00e      	beq.n	80020a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a18      	ldr	r2, [pc, #96]	; (80020ec <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d009      	beq.n	80020a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a17      	ldr	r2, [pc, #92]	; (80020f0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d004      	beq.n	80020a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a15      	ldr	r2, [pc, #84]	; (80020f4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d10c      	bne.n	80020bc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80020a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	68ba      	ldr	r2, [r7, #8]
 80020b0:	4313      	orrs	r3, r2
 80020b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	68ba      	ldr	r2, [r7, #8]
 80020ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2201      	movs	r2, #1
 80020c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2200      	movs	r2, #0
 80020c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80020cc:	2300      	movs	r3, #0
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3714      	adds	r7, #20
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr
 80020da:	bf00      	nop
 80020dc:	40010000 	.word	0x40010000
 80020e0:	40000400 	.word	0x40000400
 80020e4:	40000800 	.word	0x40000800
 80020e8:	40000c00 	.word	0x40000c00
 80020ec:	40010400 	.word	0x40010400
 80020f0:	40014000 	.word	0x40014000
 80020f4:	40001800 	.word	0x40001800

080020f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b082      	sub	sp, #8
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d101      	bne.n	800210a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e03f      	b.n	800218a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002110:	b2db      	uxtb	r3, r3
 8002112:	2b00      	cmp	r3, #0
 8002114:	d106      	bne.n	8002124 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2200      	movs	r2, #0
 800211a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f7fe fd4e 	bl	8000bc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2224      	movs	r2, #36	; 0x24
 8002128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	68da      	ldr	r2, [r3, #12]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800213a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	f000 f829 	bl	8002194 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	691a      	ldr	r2, [r3, #16]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002150:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	695a      	ldr	r2, [r3, #20]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002160:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	68da      	ldr	r2, [r3, #12]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002170:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2200      	movs	r2, #0
 8002176:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2220      	movs	r2, #32
 800217c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2220      	movs	r2, #32
 8002184:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002188:	2300      	movs	r3, #0
}
 800218a:	4618      	mov	r0, r3
 800218c:	3708      	adds	r7, #8
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
	...

08002194 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002198:	b09f      	sub	sp, #124	; 0x7c
 800219a:	af00      	add	r7, sp, #0
 800219c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800219e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	691b      	ldr	r3, [r3, #16]
 80021a4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80021a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021aa:	68d9      	ldr	r1, [r3, #12]
 80021ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	ea40 0301 	orr.w	r3, r0, r1
 80021b4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80021b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021b8:	689a      	ldr	r2, [r3, #8]
 80021ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021bc:	691b      	ldr	r3, [r3, #16]
 80021be:	431a      	orrs	r2, r3
 80021c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021c2:	695b      	ldr	r3, [r3, #20]
 80021c4:	431a      	orrs	r2, r3
 80021c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021c8:	69db      	ldr	r3, [r3, #28]
 80021ca:	4313      	orrs	r3, r2
 80021cc:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80021ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80021d8:	f021 010c 	bic.w	r1, r1, #12
 80021dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80021e2:	430b      	orrs	r3, r1
 80021e4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80021e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	695b      	ldr	r3, [r3, #20]
 80021ec:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80021f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021f2:	6999      	ldr	r1, [r3, #24]
 80021f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	ea40 0301 	orr.w	r3, r0, r1
 80021fc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80021fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	4bc5      	ldr	r3, [pc, #788]	; (8002518 <UART_SetConfig+0x384>)
 8002204:	429a      	cmp	r2, r3
 8002206:	d004      	beq.n	8002212 <UART_SetConfig+0x7e>
 8002208:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	4bc3      	ldr	r3, [pc, #780]	; (800251c <UART_SetConfig+0x388>)
 800220e:	429a      	cmp	r2, r3
 8002210:	d103      	bne.n	800221a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002212:	f7ff fd89 	bl	8001d28 <HAL_RCC_GetPCLK2Freq>
 8002216:	6778      	str	r0, [r7, #116]	; 0x74
 8002218:	e002      	b.n	8002220 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800221a:	f7ff fd71 	bl	8001d00 <HAL_RCC_GetPCLK1Freq>
 800221e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002220:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002222:	69db      	ldr	r3, [r3, #28]
 8002224:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002228:	f040 80b6 	bne.w	8002398 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800222c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800222e:	461c      	mov	r4, r3
 8002230:	f04f 0500 	mov.w	r5, #0
 8002234:	4622      	mov	r2, r4
 8002236:	462b      	mov	r3, r5
 8002238:	1891      	adds	r1, r2, r2
 800223a:	6439      	str	r1, [r7, #64]	; 0x40
 800223c:	415b      	adcs	r3, r3
 800223e:	647b      	str	r3, [r7, #68]	; 0x44
 8002240:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002244:	1912      	adds	r2, r2, r4
 8002246:	eb45 0303 	adc.w	r3, r5, r3
 800224a:	f04f 0000 	mov.w	r0, #0
 800224e:	f04f 0100 	mov.w	r1, #0
 8002252:	00d9      	lsls	r1, r3, #3
 8002254:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002258:	00d0      	lsls	r0, r2, #3
 800225a:	4602      	mov	r2, r0
 800225c:	460b      	mov	r3, r1
 800225e:	1911      	adds	r1, r2, r4
 8002260:	6639      	str	r1, [r7, #96]	; 0x60
 8002262:	416b      	adcs	r3, r5
 8002264:	667b      	str	r3, [r7, #100]	; 0x64
 8002266:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	461a      	mov	r2, r3
 800226c:	f04f 0300 	mov.w	r3, #0
 8002270:	1891      	adds	r1, r2, r2
 8002272:	63b9      	str	r1, [r7, #56]	; 0x38
 8002274:	415b      	adcs	r3, r3
 8002276:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002278:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800227c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002280:	f7fd ffa2 	bl	80001c8 <__aeabi_uldivmod>
 8002284:	4602      	mov	r2, r0
 8002286:	460b      	mov	r3, r1
 8002288:	4ba5      	ldr	r3, [pc, #660]	; (8002520 <UART_SetConfig+0x38c>)
 800228a:	fba3 2302 	umull	r2, r3, r3, r2
 800228e:	095b      	lsrs	r3, r3, #5
 8002290:	011e      	lsls	r6, r3, #4
 8002292:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002294:	461c      	mov	r4, r3
 8002296:	f04f 0500 	mov.w	r5, #0
 800229a:	4622      	mov	r2, r4
 800229c:	462b      	mov	r3, r5
 800229e:	1891      	adds	r1, r2, r2
 80022a0:	6339      	str	r1, [r7, #48]	; 0x30
 80022a2:	415b      	adcs	r3, r3
 80022a4:	637b      	str	r3, [r7, #52]	; 0x34
 80022a6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80022aa:	1912      	adds	r2, r2, r4
 80022ac:	eb45 0303 	adc.w	r3, r5, r3
 80022b0:	f04f 0000 	mov.w	r0, #0
 80022b4:	f04f 0100 	mov.w	r1, #0
 80022b8:	00d9      	lsls	r1, r3, #3
 80022ba:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80022be:	00d0      	lsls	r0, r2, #3
 80022c0:	4602      	mov	r2, r0
 80022c2:	460b      	mov	r3, r1
 80022c4:	1911      	adds	r1, r2, r4
 80022c6:	65b9      	str	r1, [r7, #88]	; 0x58
 80022c8:	416b      	adcs	r3, r5
 80022ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 80022cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	461a      	mov	r2, r3
 80022d2:	f04f 0300 	mov.w	r3, #0
 80022d6:	1891      	adds	r1, r2, r2
 80022d8:	62b9      	str	r1, [r7, #40]	; 0x28
 80022da:	415b      	adcs	r3, r3
 80022dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022de:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80022e2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80022e6:	f7fd ff6f 	bl	80001c8 <__aeabi_uldivmod>
 80022ea:	4602      	mov	r2, r0
 80022ec:	460b      	mov	r3, r1
 80022ee:	4b8c      	ldr	r3, [pc, #560]	; (8002520 <UART_SetConfig+0x38c>)
 80022f0:	fba3 1302 	umull	r1, r3, r3, r2
 80022f4:	095b      	lsrs	r3, r3, #5
 80022f6:	2164      	movs	r1, #100	; 0x64
 80022f8:	fb01 f303 	mul.w	r3, r1, r3
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	00db      	lsls	r3, r3, #3
 8002300:	3332      	adds	r3, #50	; 0x32
 8002302:	4a87      	ldr	r2, [pc, #540]	; (8002520 <UART_SetConfig+0x38c>)
 8002304:	fba2 2303 	umull	r2, r3, r2, r3
 8002308:	095b      	lsrs	r3, r3, #5
 800230a:	005b      	lsls	r3, r3, #1
 800230c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002310:	441e      	add	r6, r3
 8002312:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002314:	4618      	mov	r0, r3
 8002316:	f04f 0100 	mov.w	r1, #0
 800231a:	4602      	mov	r2, r0
 800231c:	460b      	mov	r3, r1
 800231e:	1894      	adds	r4, r2, r2
 8002320:	623c      	str	r4, [r7, #32]
 8002322:	415b      	adcs	r3, r3
 8002324:	627b      	str	r3, [r7, #36]	; 0x24
 8002326:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800232a:	1812      	adds	r2, r2, r0
 800232c:	eb41 0303 	adc.w	r3, r1, r3
 8002330:	f04f 0400 	mov.w	r4, #0
 8002334:	f04f 0500 	mov.w	r5, #0
 8002338:	00dd      	lsls	r5, r3, #3
 800233a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800233e:	00d4      	lsls	r4, r2, #3
 8002340:	4622      	mov	r2, r4
 8002342:	462b      	mov	r3, r5
 8002344:	1814      	adds	r4, r2, r0
 8002346:	653c      	str	r4, [r7, #80]	; 0x50
 8002348:	414b      	adcs	r3, r1
 800234a:	657b      	str	r3, [r7, #84]	; 0x54
 800234c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	461a      	mov	r2, r3
 8002352:	f04f 0300 	mov.w	r3, #0
 8002356:	1891      	adds	r1, r2, r2
 8002358:	61b9      	str	r1, [r7, #24]
 800235a:	415b      	adcs	r3, r3
 800235c:	61fb      	str	r3, [r7, #28]
 800235e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002362:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002366:	f7fd ff2f 	bl	80001c8 <__aeabi_uldivmod>
 800236a:	4602      	mov	r2, r0
 800236c:	460b      	mov	r3, r1
 800236e:	4b6c      	ldr	r3, [pc, #432]	; (8002520 <UART_SetConfig+0x38c>)
 8002370:	fba3 1302 	umull	r1, r3, r3, r2
 8002374:	095b      	lsrs	r3, r3, #5
 8002376:	2164      	movs	r1, #100	; 0x64
 8002378:	fb01 f303 	mul.w	r3, r1, r3
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	00db      	lsls	r3, r3, #3
 8002380:	3332      	adds	r3, #50	; 0x32
 8002382:	4a67      	ldr	r2, [pc, #412]	; (8002520 <UART_SetConfig+0x38c>)
 8002384:	fba2 2303 	umull	r2, r3, r2, r3
 8002388:	095b      	lsrs	r3, r3, #5
 800238a:	f003 0207 	and.w	r2, r3, #7
 800238e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4432      	add	r2, r6
 8002394:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002396:	e0b9      	b.n	800250c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002398:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800239a:	461c      	mov	r4, r3
 800239c:	f04f 0500 	mov.w	r5, #0
 80023a0:	4622      	mov	r2, r4
 80023a2:	462b      	mov	r3, r5
 80023a4:	1891      	adds	r1, r2, r2
 80023a6:	6139      	str	r1, [r7, #16]
 80023a8:	415b      	adcs	r3, r3
 80023aa:	617b      	str	r3, [r7, #20]
 80023ac:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80023b0:	1912      	adds	r2, r2, r4
 80023b2:	eb45 0303 	adc.w	r3, r5, r3
 80023b6:	f04f 0000 	mov.w	r0, #0
 80023ba:	f04f 0100 	mov.w	r1, #0
 80023be:	00d9      	lsls	r1, r3, #3
 80023c0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80023c4:	00d0      	lsls	r0, r2, #3
 80023c6:	4602      	mov	r2, r0
 80023c8:	460b      	mov	r3, r1
 80023ca:	eb12 0804 	adds.w	r8, r2, r4
 80023ce:	eb43 0905 	adc.w	r9, r3, r5
 80023d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	4618      	mov	r0, r3
 80023d8:	f04f 0100 	mov.w	r1, #0
 80023dc:	f04f 0200 	mov.w	r2, #0
 80023e0:	f04f 0300 	mov.w	r3, #0
 80023e4:	008b      	lsls	r3, r1, #2
 80023e6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80023ea:	0082      	lsls	r2, r0, #2
 80023ec:	4640      	mov	r0, r8
 80023ee:	4649      	mov	r1, r9
 80023f0:	f7fd feea 	bl	80001c8 <__aeabi_uldivmod>
 80023f4:	4602      	mov	r2, r0
 80023f6:	460b      	mov	r3, r1
 80023f8:	4b49      	ldr	r3, [pc, #292]	; (8002520 <UART_SetConfig+0x38c>)
 80023fa:	fba3 2302 	umull	r2, r3, r3, r2
 80023fe:	095b      	lsrs	r3, r3, #5
 8002400:	011e      	lsls	r6, r3, #4
 8002402:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002404:	4618      	mov	r0, r3
 8002406:	f04f 0100 	mov.w	r1, #0
 800240a:	4602      	mov	r2, r0
 800240c:	460b      	mov	r3, r1
 800240e:	1894      	adds	r4, r2, r2
 8002410:	60bc      	str	r4, [r7, #8]
 8002412:	415b      	adcs	r3, r3
 8002414:	60fb      	str	r3, [r7, #12]
 8002416:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800241a:	1812      	adds	r2, r2, r0
 800241c:	eb41 0303 	adc.w	r3, r1, r3
 8002420:	f04f 0400 	mov.w	r4, #0
 8002424:	f04f 0500 	mov.w	r5, #0
 8002428:	00dd      	lsls	r5, r3, #3
 800242a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800242e:	00d4      	lsls	r4, r2, #3
 8002430:	4622      	mov	r2, r4
 8002432:	462b      	mov	r3, r5
 8002434:	1814      	adds	r4, r2, r0
 8002436:	64bc      	str	r4, [r7, #72]	; 0x48
 8002438:	414b      	adcs	r3, r1
 800243a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800243c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	4618      	mov	r0, r3
 8002442:	f04f 0100 	mov.w	r1, #0
 8002446:	f04f 0200 	mov.w	r2, #0
 800244a:	f04f 0300 	mov.w	r3, #0
 800244e:	008b      	lsls	r3, r1, #2
 8002450:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002454:	0082      	lsls	r2, r0, #2
 8002456:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800245a:	f7fd feb5 	bl	80001c8 <__aeabi_uldivmod>
 800245e:	4602      	mov	r2, r0
 8002460:	460b      	mov	r3, r1
 8002462:	4b2f      	ldr	r3, [pc, #188]	; (8002520 <UART_SetConfig+0x38c>)
 8002464:	fba3 1302 	umull	r1, r3, r3, r2
 8002468:	095b      	lsrs	r3, r3, #5
 800246a:	2164      	movs	r1, #100	; 0x64
 800246c:	fb01 f303 	mul.w	r3, r1, r3
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	011b      	lsls	r3, r3, #4
 8002474:	3332      	adds	r3, #50	; 0x32
 8002476:	4a2a      	ldr	r2, [pc, #168]	; (8002520 <UART_SetConfig+0x38c>)
 8002478:	fba2 2303 	umull	r2, r3, r2, r3
 800247c:	095b      	lsrs	r3, r3, #5
 800247e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002482:	441e      	add	r6, r3
 8002484:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002486:	4618      	mov	r0, r3
 8002488:	f04f 0100 	mov.w	r1, #0
 800248c:	4602      	mov	r2, r0
 800248e:	460b      	mov	r3, r1
 8002490:	1894      	adds	r4, r2, r2
 8002492:	603c      	str	r4, [r7, #0]
 8002494:	415b      	adcs	r3, r3
 8002496:	607b      	str	r3, [r7, #4]
 8002498:	e9d7 2300 	ldrd	r2, r3, [r7]
 800249c:	1812      	adds	r2, r2, r0
 800249e:	eb41 0303 	adc.w	r3, r1, r3
 80024a2:	f04f 0400 	mov.w	r4, #0
 80024a6:	f04f 0500 	mov.w	r5, #0
 80024aa:	00dd      	lsls	r5, r3, #3
 80024ac:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80024b0:	00d4      	lsls	r4, r2, #3
 80024b2:	4622      	mov	r2, r4
 80024b4:	462b      	mov	r3, r5
 80024b6:	eb12 0a00 	adds.w	sl, r2, r0
 80024ba:	eb43 0b01 	adc.w	fp, r3, r1
 80024be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	4618      	mov	r0, r3
 80024c4:	f04f 0100 	mov.w	r1, #0
 80024c8:	f04f 0200 	mov.w	r2, #0
 80024cc:	f04f 0300 	mov.w	r3, #0
 80024d0:	008b      	lsls	r3, r1, #2
 80024d2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80024d6:	0082      	lsls	r2, r0, #2
 80024d8:	4650      	mov	r0, sl
 80024da:	4659      	mov	r1, fp
 80024dc:	f7fd fe74 	bl	80001c8 <__aeabi_uldivmod>
 80024e0:	4602      	mov	r2, r0
 80024e2:	460b      	mov	r3, r1
 80024e4:	4b0e      	ldr	r3, [pc, #56]	; (8002520 <UART_SetConfig+0x38c>)
 80024e6:	fba3 1302 	umull	r1, r3, r3, r2
 80024ea:	095b      	lsrs	r3, r3, #5
 80024ec:	2164      	movs	r1, #100	; 0x64
 80024ee:	fb01 f303 	mul.w	r3, r1, r3
 80024f2:	1ad3      	subs	r3, r2, r3
 80024f4:	011b      	lsls	r3, r3, #4
 80024f6:	3332      	adds	r3, #50	; 0x32
 80024f8:	4a09      	ldr	r2, [pc, #36]	; (8002520 <UART_SetConfig+0x38c>)
 80024fa:	fba2 2303 	umull	r2, r3, r2, r3
 80024fe:	095b      	lsrs	r3, r3, #5
 8002500:	f003 020f 	and.w	r2, r3, #15
 8002504:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4432      	add	r2, r6
 800250a:	609a      	str	r2, [r3, #8]
}
 800250c:	bf00      	nop
 800250e:	377c      	adds	r7, #124	; 0x7c
 8002510:	46bd      	mov	sp, r7
 8002512:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002516:	bf00      	nop
 8002518:	40011000 	.word	0x40011000
 800251c:	40011400 	.word	0x40011400
 8002520:	51eb851f 	.word	0x51eb851f

08002524 <__libc_init_array>:
 8002524:	b570      	push	{r4, r5, r6, lr}
 8002526:	4d0d      	ldr	r5, [pc, #52]	; (800255c <__libc_init_array+0x38>)
 8002528:	4c0d      	ldr	r4, [pc, #52]	; (8002560 <__libc_init_array+0x3c>)
 800252a:	1b64      	subs	r4, r4, r5
 800252c:	10a4      	asrs	r4, r4, #2
 800252e:	2600      	movs	r6, #0
 8002530:	42a6      	cmp	r6, r4
 8002532:	d109      	bne.n	8002548 <__libc_init_array+0x24>
 8002534:	4d0b      	ldr	r5, [pc, #44]	; (8002564 <__libc_init_array+0x40>)
 8002536:	4c0c      	ldr	r4, [pc, #48]	; (8002568 <__libc_init_array+0x44>)
 8002538:	f000 f820 	bl	800257c <_init>
 800253c:	1b64      	subs	r4, r4, r5
 800253e:	10a4      	asrs	r4, r4, #2
 8002540:	2600      	movs	r6, #0
 8002542:	42a6      	cmp	r6, r4
 8002544:	d105      	bne.n	8002552 <__libc_init_array+0x2e>
 8002546:	bd70      	pop	{r4, r5, r6, pc}
 8002548:	f855 3b04 	ldr.w	r3, [r5], #4
 800254c:	4798      	blx	r3
 800254e:	3601      	adds	r6, #1
 8002550:	e7ee      	b.n	8002530 <__libc_init_array+0xc>
 8002552:	f855 3b04 	ldr.w	r3, [r5], #4
 8002556:	4798      	blx	r3
 8002558:	3601      	adds	r6, #1
 800255a:	e7f2      	b.n	8002542 <__libc_init_array+0x1e>
 800255c:	080025b4 	.word	0x080025b4
 8002560:	080025b4 	.word	0x080025b4
 8002564:	080025b4 	.word	0x080025b4
 8002568:	080025b8 	.word	0x080025b8

0800256c <memset>:
 800256c:	4402      	add	r2, r0
 800256e:	4603      	mov	r3, r0
 8002570:	4293      	cmp	r3, r2
 8002572:	d100      	bne.n	8002576 <memset+0xa>
 8002574:	4770      	bx	lr
 8002576:	f803 1b01 	strb.w	r1, [r3], #1
 800257a:	e7f9      	b.n	8002570 <memset+0x4>

0800257c <_init>:
 800257c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800257e:	bf00      	nop
 8002580:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002582:	bc08      	pop	{r3}
 8002584:	469e      	mov	lr, r3
 8002586:	4770      	bx	lr

08002588 <_fini>:
 8002588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800258a:	bf00      	nop
 800258c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800258e:	bc08      	pop	{r3}
 8002590:	469e      	mov	lr, r3
 8002592:	4770      	bx	lr
